
--- Manual ---
('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']])
parse_name: class cv.Vec8i with ['cv'] -> fullname:cv::Vec8i namespace:cv classpath: classname: name:Vec8i
register class cv::Vec8i (('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']]))

--- Manual ---
('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6d with ['cv'] -> fullname:cv::Vec6d namespace:cv classpath: classname: name:Vec6d
register class cv::Vec6d (('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6f with ['cv'] -> fullname:cv::Vec6f namespace:cv classpath: classname: name:Vec6f
register class cv::Vec6f (('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6i with ['cv'] -> fullname:cv::Vec6i namespace:cv classpath: classname: name:Vec6i
register class cv::Vec6i (('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4d with ['cv'] -> fullname:cv::Vec4d namespace:cv classpath: classname: name:Vec4d
register class cv::Vec4d (('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4f with ['cv'] -> fullname:cv::Vec4f namespace:cv classpath: classname: name:Vec4f
register class cv::Vec4f (('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4i with ['cv'] -> fullname:cv::Vec4i namespace:cv classpath: classname: name:Vec4i
register class cv::Vec4i (('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4w with ['cv'] -> fullname:cv::Vec4w namespace:cv classpath: classname: name:Vec4w
register class cv::Vec4w (('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4s with ['cv'] -> fullname:cv::Vec4s namespace:cv classpath: classname: name:Vec4s
register class cv::Vec4s (('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4b with ['cv'] -> fullname:cv::Vec4b namespace:cv classpath: classname: name:Vec4b
register class cv::Vec4b (('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3d with ['cv'] -> fullname:cv::Vec3d namespace:cv classpath: classname: name:Vec3d
register class cv::Vec3d (('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']]))

--- Manual ---
(   'class cv.Point3d',
    '',
    ['/Simple'],
    [   ['double', 'x', '', '/RW'],
        ['double', 'y', '', '/RW'],
        ['double', 'z', '', '/RW']])
parse_name: class cv.Point3d with ['cv'] -> fullname:cv::Point3d namespace:cv classpath: classname: name:Point3d
register class cv::Point3d (('class cv.Point3d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW'], ['double', 'z', '', '/RW']]))

--- Manual ---
('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3f with ['cv'] -> fullname:cv::Vec3f namespace:cv classpath: classname: name:Vec3f
register class cv::Vec3f (('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']]))

--- Manual ---
(   'class cv.Point3f',
    '',
    ['/Simple'],
    [   ['float', 'x', '', '/RW'],
        ['float', 'y', '', '/RW'],
        ['float', 'z', '', '/RW']])
parse_name: class cv.Point3f with ['cv'] -> fullname:cv::Point3f namespace:cv classpath: classname: name:Point3f
register class cv::Point3f (('class cv.Point3f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW'], ['float', 'z', '', '/RW']]))

--- Manual ---
('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3i with ['cv'] -> fullname:cv::Vec3i namespace:cv classpath: classname: name:Vec3i
register class cv::Vec3i (('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']]))

--- Manual ---
(   'class cv.Point3i',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'z', '', '/RW']])
parse_name: class cv.Point3i with ['cv'] -> fullname:cv::Point3i namespace:cv classpath: classname: name:Point3i
register class cv::Point3i (('class cv.Point3i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'z', '', '/RW']]))

--- Manual ---
('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3w with ['cv'] -> fullname:cv::Vec3w namespace:cv classpath: classname: name:Vec3w
register class cv::Vec3w (('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3s with ['cv'] -> fullname:cv::Vec3s namespace:cv classpath: classname: name:Vec3s
register class cv::Vec3s (('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3b with ['cv'] -> fullname:cv::Vec3b namespace:cv classpath: classname: name:Vec3b
register class cv::Vec3b (('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2d with ['cv'] -> fullname:cv::Vec2d namespace:cv classpath: classname: name:Vec2d
register class cv::Vec2d (('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2d',
    '',
    ['/Simple'],
    [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']])
parse_name: class cv.Size2d with ['cv'] -> fullname:cv::Size2d namespace:cv classpath: classname: name:Size2d
register class cv::Size2d (('class cv.Size2d', '', ['/Simple'], [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2d',
    '',
    ['/Simple'],
    [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']])
parse_name: class cv.Point2d with ['cv'] -> fullname:cv::Point2d namespace:cv classpath: classname: name:Point2d
register class cv::Point2d (('class cv.Point2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2d',
    '',
    ['/Simple'],
    [   ['double', 'x', '', '/RW'],
        ['double', 'y', '', '/RW'],
        ['double', 'width', '', '/RW'],
        ['double', 'height', '', '/RW']])
parse_name: class cv.Rect2d with ['cv'] -> fullname:cv::Rect2d namespace:cv classpath: classname: name:Rect2d
register class cv::Rect2d (('class cv.Rect2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW'], ['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2f with ['cv'] -> fullname:cv::Vec2f namespace:cv classpath: classname: name:Vec2f
register class cv::Vec2f (('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2f',
    '',
    ['/Simple'],
    [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']])
parse_name: class cv.Size2f with ['cv'] -> fullname:cv::Size2f namespace:cv classpath: classname: name:Size2f
register class cv::Size2f (('class cv.Size2f', '', ['/Simple'], [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2f',
    '',
    ['/Simple'],
    [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']])
parse_name: class cv.Point2f with ['cv'] -> fullname:cv::Point2f namespace:cv classpath: classname: name:Point2f
register class cv::Point2f (('class cv.Point2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2f',
    '',
    ['/Simple'],
    [   ['float', 'x', '', '/RW'],
        ['float', 'y', '', '/RW'],
        ['float', 'width', '', '/RW'],
        ['float', 'height', '', '/RW']])
parse_name: class cv.Rect2f with ['cv'] -> fullname:cv::Rect2f namespace:cv classpath: classname: name:Rect2f
register class cv::Rect2f (('class cv.Rect2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW'], ['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size2l',
    '',
    ['/Simple'],
    [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']])
parse_name: class cv.Size2l with ['cv'] -> fullname:cv::Size2l namespace:cv classpath: classname: name:Size2l
register class cv::Size2l (('class cv.Size2l', '', ['/Simple'], [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2l',
    '',
    ['/Simple'],
    [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']])
parse_name: class cv.Point2l with ['cv'] -> fullname:cv::Point2l namespace:cv classpath: classname: name:Point2l
register class cv::Point2l (('class cv.Point2l', '', ['/Simple'], [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']]))

--- Manual ---
('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2i with ['cv'] -> fullname:cv::Vec2i namespace:cv classpath: classname: name:Vec2i
register class cv::Vec2i (('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2i',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size2i with ['cv'] -> fullname:cv::Size2i namespace:cv classpath: classname: name:Size2i
register class cv::Size2i (('class cv.Size2i', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2i',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point2i with ['cv'] -> fullname:cv::Point2i namespace:cv classpath: classname: name:Point2i
register class cv::Point2i (('class cv.Point2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2i',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect2i with ['cv'] -> fullname:cv::Rect2i namespace:cv classpath: classname: name:Rect2i
register class cv::Rect2i (('class cv.Rect2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size with ['cv'] -> fullname:cv::Size namespace:cv classpath: classname: name:Size
register class cv::Size (('class cv.Size', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point with ['cv'] -> fullname:cv::Point namespace:cv classpath: classname: name:Point
register class cv::Point (('class cv.Point', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect with ['cv'] -> fullname:cv::Rect namespace:cv classpath: classname: name:Rect
register class cv::Rect (('class cv.Rect', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2w with ['cv'] -> fullname:cv::Vec2w namespace:cv classpath: classname: name:Vec2w
register class cv::Vec2w (('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2s with ['cv'] -> fullname:cv::Vec2s namespace:cv classpath: classname: name:Vec2s
register class cv::Vec2s (('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2b with ['cv'] -> fullname:cv::Vec2b namespace:cv classpath: classname: name:Vec2b
register class cv::Vec2b (('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Scalar with ['cv'] -> fullname:cv::Scalar namespace:cv classpath: classname: name:Scalar
register class cv::Scalar (('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv._InputArray', '', ['/Ghost'], [])
parse_name: class cv._InputArray with ['cv'] -> fullname:cv::_InputArray namespace:cv classpath: classname: name:_InputArray
register class cv::_InputArray (('class cv._InputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputArray', 'const _InputArray&', [], [])
parse_name: typedef cv.InputArray with ['cv'] -> fullname:cv::InputArray namespace:cv classpath: classname: name:InputArray
Registering an unknown type: InputArray

--- Manual ---
('class cv._OutputArray', '', ['/Ghost'], [])
parse_name: class cv._OutputArray with ['cv'] -> fullname:cv::_OutputArray namespace:cv classpath: classname: name:_OutputArray
register class cv::_OutputArray (('class cv._OutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.OutputArray', '_OutputArray&', [], [])
parse_name: typedef cv.OutputArray with ['cv'] -> fullname:cv::OutputArray namespace:cv classpath: classname: name:OutputArray
Registering an unknown type: OutputArray

--- Manual ---
('class cv._InputOutputArray', '', ['/Ghost'], [])
parse_name: class cv._InputOutputArray with ['cv'] -> fullname:cv::_InputOutputArray namespace:cv classpath: classname: name:_InputOutputArray
register class cv::_InputOutputArray (('class cv._InputOutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputOutputArray', '_InputOutputArray&', [], [])
parse_name: typedef cv.InputOutputArray with ['cv'] -> fullname:cv::InputOutputArray namespace:cv classpath: classname: name:InputOutputArray
Registering an unknown type: InputOutputArray

--- Manual ---
('typedef cv.InputArrayOfArrays', 'InputArray', [], [])
parse_name: typedef cv.InputArrayOfArrays with ['cv'] -> fullname:cv::InputArrayOfArrays namespace:cv classpath: classname: name:InputArrayOfArrays
Registering an unknown type: InputArrayOfArrays

--- Manual ---
('typedef cv.OutputArrayOfArrays', 'OutputArray', [], [])
parse_name: typedef cv.OutputArrayOfArrays with ['cv'] -> fullname:cv::OutputArrayOfArrays namespace:cv classpath: classname: name:OutputArrayOfArrays
Registering an unknown type: OutputArrayOfArrays

--- Manual ---
('typedef cv.InputOutputArrayOfArrays', 'InputOutputArray', [], [])
parse_name: typedef cv.InputOutputArrayOfArrays with ['cv'] -> fullname:cv::InputOutputArrayOfArrays namespace:cv classpath: classname: name:InputOutputArrayOfArrays
Registering an unknown type: InputOutputArrayOfArrays

--- Manual ---
('class cv.Range', '', ['/Ghost'], [])
parse_name: class cv.Range with ['cv'] -> fullname:cv::Range namespace:cv classpath: classname: name:Range
register class cv::Range (('class cv.Range', '', ['/Ghost'], []))

--- Manual ---
('class cv.MatExpr', '', ['/Ghost'], [])
parse_name: class cv.MatExpr with ['cv'] -> fullname:cv::MatExpr namespace:cv classpath: classname: name:MatExpr
register class cv::MatExpr (('class cv.MatExpr', '', ['/Ghost'], []))

--- Manual ---
('class cv.Mat', '', ['/Ghost'], [])
parse_name: class cv.Mat with ['cv'] -> fullname:cv::Mat namespace:cv classpath: classname: name:Mat
register class cv::Mat (('class cv.Mat', '', ['/Ghost'], []))

--- Manual ---
('class cv.UMat', '', ['/Ghost'], [])
parse_name: class cv.UMat with ['cv'] -> fullname:cv::UMat namespace:cv classpath: classname: name:UMat
register class cv::UMat (('class cv.UMat', '', ['/Ghost'], []))

--- Manual ---
('class cv.Algorithm', '', ['/Ghost'], [])
parse_name: class cv.Algorithm with ['cv'] -> fullname:cv::Algorithm namespace:cv classpath: classname: name:Algorithm
register class cv::Algorithm (('class cv.Algorithm', '', ['/Ghost'], []))

--- Manual ---
('class cv.DMatch', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.DMatch with ['cv'] -> fullname:cv::DMatch namespace:cv classpath: classname: name:DMatch
register class cv::DMatch (('class cv.DMatch', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.KeyPoint', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.KeyPoint with ['cv'] -> fullname:cv::KeyPoint namespace:cv classpath: classname: name:KeyPoint
register class cv::KeyPoint (('class cv.KeyPoint', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.RotatedRect', '', ['/Ghost'], [])
parse_name: class cv.RotatedRect with ['cv'] -> fullname:cv::RotatedRect namespace:cv classpath: classname: name:RotatedRect
register class cv::RotatedRect (('class cv.RotatedRect', '', ['/Ghost'], []))

--- Manual ---
('class cv.TermCriteria', '', ['/Ghost'], [])
parse_name: class cv.TermCriteria with ['cv'] -> fullname:cv::TermCriteria namespace:cv classpath: classname: name:TermCriteria
register class cv::TermCriteria (('class cv.TermCriteria', '', ['/Ghost'], []))

--- Manual ---
('class cv.utils.logging.LogTag', '', ['/Ghost'], [])
parse_name: class cv.utils.logging.LogTag with ['cv'] -> fullname:cv::utils::logging::LogTag namespace:cv classpath:utils::logging classname:logging name:LogTag
register class cv::utils::logging::LogTag (('class cv.utils.logging.LogTag', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileNode', '', ['/Ghost'], [])
parse_name: class cv.FileNode with ['cv'] -> fullname:cv::FileNode namespace:cv classpath: classname: name:FileNode
register class cv::FileNode (('class cv.FileNode', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileStorage', '', ['/Ghost'], [])
parse_name: class cv.FileStorage with ['cv'] -> fullname:cv::FileStorage namespace:cv classpath: classname: name:FileStorage
register class cv::FileStorage (('class cv.FileStorage', '', ['/Ghost'], []))

--- Manual ---
('typedef DummyVectorOfPoint3i', 'std::vector<Point3i>', [], [])
parse_name: typedef DummyVectorOfPoint3i with ['cv'] -> fullname:DummyVectorOfPoint3i namespace: classpath: classname: name:DummyVectorOfPoint3i
Registering an unknown type: DummyVectorOfPoint3i

--- Manual ---
('typedef DummyVectorOfPoint3f', 'std::vector<Point3f>', [], [])
parse_name: typedef DummyVectorOfPoint3f with ['cv'] -> fullname:DummyVectorOfPoint3f namespace: classpath: classname: name:DummyVectorOfPoint3f
Registering an unknown type: DummyVectorOfPoint3f

--- Manual ---
('typedef DummyVectorOfPoint3d', 'std::vector<Point3d>', [], [])
parse_name: typedef DummyVectorOfPoint3d with ['cv'] -> fullname:DummyVectorOfPoint3d namespace: classpath: classname: name:DummyVectorOfPoint3d
Registering an unknown type: DummyVectorOfPoint3d

--- Manual ---
(   'typedef DummyVectorOfVectorOfPoint3i',
    'std::vector<std::vector<Point3i>>',
    [],
    [])
parse_name: typedef DummyVectorOfVectorOfPoint3i with ['cv'] -> fullname:DummyVectorOfVectorOfPoint3i namespace: classpath: classname: name:DummyVectorOfVectorOfPoint3i
Registering an unknown type: DummyVectorOfVectorOfPoint3i

--- Manual ---
(   'typedef DummyVectorOfVectorOfPoint3f',
    'std::vector<std::vector<Point3f>>',
    [],
    [])
parse_name: typedef DummyVectorOfVectorOfPoint3f with ['cv'] -> fullname:DummyVectorOfVectorOfPoint3f namespace: classpath: classname: name:DummyVectorOfVectorOfPoint3f
Registering an unknown type: DummyVectorOfVectorOfPoint3f

--- Manual ---
(   'typedef DummyVectorOfVectorOfPoint3d',
    'std::vector<std::vector<Point3d>>',
    [],
    [])
parse_name: typedef DummyVectorOfVectorOfPoint3d with ['cv'] -> fullname:DummyVectorOfVectorOfPoint3d namespace: classpath: classname: name:DummyVectorOfVectorOfPoint3d
Registering an unknown type: DummyVectorOfVectorOfPoint3d

--- Manual ---
('class cv.dnn.LayerParams', '', ['/Ghost'], [])
parse_name: class cv.dnn.LayerParams with ['cv'] -> fullname:cv::dnn::LayerParams namespace:cv classpath:dnn classname:dnn name:LayerParams
register class cv::dnn::LayerParams (('class cv.dnn.LayerParams', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.Layer', '', ['/Ghost'], [])
parse_name: class cv.dnn.Layer with ['cv'] -> fullname:cv::dnn::Layer namespace:cv classpath:dnn classname:dnn name:Layer
register class cv::dnn::Layer (('class cv.dnn.Layer', '', ['/Ghost'], []))

--- Manual ---
('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])
parse_name: class cv.Feature2D with ['cv'] -> fullname:cv::Feature2D namespace:cv classpath: classname: name:Feature2D
register class cv::Feature2D (('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])) impl:cv::Algorithm

--- Manual ---
('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])
parse_name: class cv.DescriptorMatcher with ['cv'] -> fullname:cv::DescriptorMatcher namespace:cv classpath: classname: name:DescriptorMatcher
register class cv::DescriptorMatcher (('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])) impl:cv::Algorithm

--- Manual ---
('typedef cv.FeatureDetector', 'Feature2D', [], [])
parse_name: typedef cv.FeatureDetector with ['cv'] -> fullname:cv::FeatureDetector namespace:cv classpath: classname: name:FeatureDetector
Registering an unknown type: FeatureDetector

--- Manual ---
('typedef cv.DescriptorExtractor', 'Feature2D', [], [])
parse_name: typedef cv.DescriptorExtractor with ['cv'] -> fullname:cv::DescriptorExtractor namespace:cv classpath: classname: name:DescriptorExtractor
Registering an unknown type: DescriptorExtractor

--- Manual ---
('enum cv.InterpolationFlags', '', ['/Ghost'], [])
parse_name: enum cv.InterpolationFlags with ['cv'] -> fullname:cv::InterpolationFlags namespace:cv classpath: classname: name:InterpolationFlags


=============== Header: /Users/calumbruton/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.26.6/headers/4.1/opencv2/viz/types.hpp ================


Namespaces: ['cv', 'cv.viz']
Comment: {}

--- Incoming ---
[   'class cv.viz.Color',
    ': cv::viz::Scalar',
    [],
    [],
    None,
    '@brief This class represents color in BGR order.']
parse_name: class cv.viz.Color with ['cv', 'cv::viz'] -> fullname:cv::viz::Color namespace:cv::viz classpath: classname: name:Color
register class cv::viz::Color (['class cv.viz.Color', ': cv::viz::Scalar', [], [], None, '@brief This class represents color in BGR order.']) impl:cv::viz::Scalar

--- Incoming ---
['cv.viz.Color.Color', 'C', [], [], None, '']
parse_name: cv.viz.Color.Color with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::Color namespace:cv::viz classpath:Color classname:Color name:Color
register (constructor) default in cv::viz::Color (cv_viz_Color_Color)

--- Incoming ---
[   'cv.viz.Color.Color',
    'C',
    [],
    [['double', 'gray', '', []]],
    None,
    'The three channels will have the same value equal to gray.']
parse_name: cv.viz.Color.Color with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::Color namespace:cv::viz classpath:Color classname:Color name:Color
register (constructor) new in cv::viz::Color (cv_viz_Color_Color_double)

--- Incoming ---
[   'cv.viz.Color.Color',
    'C',
    [],
    [   ['double', 'blue', '', []],
        ['double', 'green', '', []],
        ['double', 'red', '', []]],
    None,
    '']
parse_name: cv.viz.Color.Color with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::Color namespace:cv::viz classpath:Color classname:Color name:Color
register (constructor) new in cv::viz::Color (cv_viz_Color_Color_double_double_double)

--- Incoming ---
['cv.viz.Color.Color', 'C', [], [['const Scalar&', 'color', '', []]], None, '']
parse_name: cv.viz.Color.Color with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::Color namespace:cv::viz classpath:Color classname:Color name:Color
register (constructor) new in cv::viz::Color (cv_viz_Color_Color_Scalar)

--- Incoming ---
['cv.viz.Color.operator Vec3b', '', ['/C'], [], None, '']
parse_name: cv.viz.Color.operator Vec3b with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::operator Vec3b namespace:cv::viz classpath:Color classname:Color name:operator Vec3b
register (convertor method) operator Vec3b in cv::viz::Color (cv_viz_Color_operator_Vec3b_const)

--- Incoming ---
['cv.viz.Color.black', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.black with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::black namespace:cv::viz classpath:Color classname:Color name:black
register (method) black in cv::viz::Color (cv_viz_Color_black)

--- Incoming ---
['cv.viz.Color.blue', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.blue with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::blue namespace:cv::viz classpath:Color classname:Color name:blue
register (method) blue in cv::viz::Color (cv_viz_Color_blue)

--- Incoming ---
['cv.viz.Color.green', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.green with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::green namespace:cv::viz classpath:Color classname:Color name:green
register (method) green in cv::viz::Color (cv_viz_Color_green)

--- Incoming ---
['cv.viz.Color.cyan', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.cyan with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::cyan namespace:cv::viz classpath:Color classname:Color name:cyan
register (method) cyan in cv::viz::Color (cv_viz_Color_cyan)

--- Incoming ---
['cv.viz.Color.red', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.red with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::red namespace:cv::viz classpath:Color classname:Color name:red
register (method) red in cv::viz::Color (cv_viz_Color_red)

--- Incoming ---
['cv.viz.Color.magenta', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.magenta with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::magenta namespace:cv::viz classpath:Color classname:Color name:magenta
register (method) magenta in cv::viz::Color (cv_viz_Color_magenta)

--- Incoming ---
['cv.viz.Color.yellow', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.yellow with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::yellow namespace:cv::viz classpath:Color classname:Color name:yellow
register (method) yellow in cv::viz::Color (cv_viz_Color_yellow)

--- Incoming ---
['cv.viz.Color.white', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.white with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::white namespace:cv::viz classpath:Color classname:Color name:white
register (method) white in cv::viz::Color (cv_viz_Color_white)

--- Incoming ---
['cv.viz.Color.gray', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.gray with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::gray namespace:cv::viz classpath:Color classname:Color name:gray
register (method) gray in cv::viz::Color (cv_viz_Color_gray)

--- Incoming ---
['cv.viz.Color.mlab', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.mlab with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::mlab namespace:cv::viz classpath:Color classname:Color name:mlab
register (method) mlab in cv::viz::Color (cv_viz_Color_mlab)

--- Incoming ---
['cv.viz.Color.navy', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.navy with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::navy namespace:cv::viz classpath:Color classname:Color name:navy
register (method) navy in cv::viz::Color (cv_viz_Color_navy)

--- Incoming ---
['cv.viz.Color.olive', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.olive with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::olive namespace:cv::viz classpath:Color classname:Color name:olive
register (method) olive in cv::viz::Color (cv_viz_Color_olive)

--- Incoming ---
['cv.viz.Color.maroon', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.maroon with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::maroon namespace:cv::viz classpath:Color classname:Color name:maroon
register (method) maroon in cv::viz::Color (cv_viz_Color_maroon)

--- Incoming ---
['cv.viz.Color.teal', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.teal with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::teal namespace:cv::viz classpath:Color classname:Color name:teal
register (method) teal in cv::viz::Color (cv_viz_Color_teal)

--- Incoming ---
['cv.viz.Color.rose', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.rose with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::rose namespace:cv::viz classpath:Color classname:Color name:rose
register (method) rose in cv::viz::Color (cv_viz_Color_rose)

--- Incoming ---
['cv.viz.Color.azure', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.azure with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::azure namespace:cv::viz classpath:Color classname:Color name:azure
register (method) azure in cv::viz::Color (cv_viz_Color_azure)

--- Incoming ---
['cv.viz.Color.lime', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.lime with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::lime namespace:cv::viz classpath:Color classname:Color name:lime
register (method) lime in cv::viz::Color (cv_viz_Color_lime)

--- Incoming ---
['cv.viz.Color.gold', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.gold with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::gold namespace:cv::viz classpath:Color classname:Color name:gold
register (method) gold in cv::viz::Color (cv_viz_Color_gold)

--- Incoming ---
['cv.viz.Color.brown', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.brown with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::brown namespace:cv::viz classpath:Color classname:Color name:brown
register (method) brown in cv::viz::Color (cv_viz_Color_brown)

--- Incoming ---
['cv.viz.Color.orange', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.orange with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::orange namespace:cv::viz classpath:Color classname:Color name:orange
register (method) orange in cv::viz::Color (cv_viz_Color_orange)

--- Incoming ---
['cv.viz.Color.chartreuse', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.chartreuse with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::chartreuse namespace:cv::viz classpath:Color classname:Color name:chartreuse
register (method) chartreuse in cv::viz::Color (cv_viz_Color_chartreuse)

--- Incoming ---
['cv.viz.Color.orange_red', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.orange_red with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::orange_red namespace:cv::viz classpath:Color classname:Color name:orange_red
register (method) orange_red in cv::viz::Color (cv_viz_Color_orange_red)

--- Incoming ---
['cv.viz.Color.purple', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.purple with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::purple namespace:cv::viz classpath:Color classname:Color name:purple
register (method) purple in cv::viz::Color (cv_viz_Color_purple)

--- Incoming ---
['cv.viz.Color.indigo', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.indigo with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::indigo namespace:cv::viz classpath:Color classname:Color name:indigo
register (method) indigo in cv::viz::Color (cv_viz_Color_indigo)

--- Incoming ---
['cv.viz.Color.pink', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.pink with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::pink namespace:cv::viz classpath:Color classname:Color name:pink
register (method) pink in cv::viz::Color (cv_viz_Color_pink)

--- Incoming ---
['cv.viz.Color.cherry', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.cherry with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::cherry namespace:cv::viz classpath:Color classname:Color name:cherry
register (method) cherry in cv::viz::Color (cv_viz_Color_cherry)

--- Incoming ---
['cv.viz.Color.bluberry', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.bluberry with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::bluberry namespace:cv::viz classpath:Color classname:Color name:bluberry
register (method) bluberry in cv::viz::Color (cv_viz_Color_bluberry)

--- Incoming ---
['cv.viz.Color.raspberry', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.raspberry with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::raspberry namespace:cv::viz classpath:Color classname:Color name:raspberry
register (method) raspberry in cv::viz::Color (cv_viz_Color_raspberry)

--- Incoming ---
['cv.viz.Color.silver', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.silver with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::silver namespace:cv::viz classpath:Color classname:Color name:silver
register (method) silver in cv::viz::Color (cv_viz_Color_silver)

--- Incoming ---
['cv.viz.Color.violet', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.violet with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::violet namespace:cv::viz classpath:Color classname:Color name:violet
register (method) violet in cv::viz::Color (cv_viz_Color_violet)

--- Incoming ---
['cv.viz.Color.apricot', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.apricot with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::apricot namespace:cv::viz classpath:Color classname:Color name:apricot
register (method) apricot in cv::viz::Color (cv_viz_Color_apricot)

--- Incoming ---
['cv.viz.Color.turquoise', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.turquoise with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::turquoise namespace:cv::viz classpath:Color classname:Color name:turquoise
register (method) turquoise in cv::viz::Color (cv_viz_Color_turquoise)

--- Incoming ---
['cv.viz.Color.celestial_blue', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.celestial_blue with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::celestial_blue namespace:cv::viz classpath:Color classname:Color name:celestial_blue
register (method) celestial_blue in cv::viz::Color (cv_viz_Color_celestial_blue)

--- Incoming ---
['cv.viz.Color.amethyst', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.amethyst with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::amethyst namespace:cv::viz classpath:Color classname:Color name:amethyst
register (method) amethyst in cv::viz::Color (cv_viz_Color_amethyst)

--- Incoming ---
['cv.viz.Color.not_set', 'Color', ['/S'], [], None, '']
parse_name: cv.viz.Color.not_set with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::not_set namespace:cv::viz classpath:Color classname:Color name:not_set
register (method) not_set in cv::viz::Color (cv_viz_Color_not_set)

--- Incoming ---
[   'class cv.viz.Mesh',
    '',
    [],
    [],
    None,
    '@brief This class wraps mesh attributes, and it can load a mesh from a '
    'ply file. :']
parse_name: class cv.viz.Mesh with ['cv', 'cv::viz'] -> fullname:cv::viz::Mesh namespace:cv::viz classpath: classname: name:Mesh
register class cv::viz::Mesh (['class cv.viz.Mesh', '', [], [], None, '@brief This class wraps mesh attributes, and it can load a mesh from a ply file. :'])

--- Incoming ---
[   'enum cv.viz.Mesh.<unnamed>',
    '',
    [],
    [   ['const cv.viz.Mesh.LOAD_AUTO', '0', [], [], None, ''],
        ['const cv.viz.Mesh.LOAD_PLY', '1', [], [], None, ''],
        ['const cv.viz.Mesh.LOAD_OBJ', '2', [], [], None, '']],
    None,
    '']
parse_name: const cv.viz.Mesh.LOAD_AUTO with ['cv', 'cv::viz'] -> fullname:cv::viz::Mesh::LOAD_AUTO namespace:cv::viz classpath:Mesh classname:Mesh name:LOAD_AUTO
parse_name: const cv.viz.Mesh.LOAD_PLY with ['cv', 'cv::viz'] -> fullname:cv::viz::Mesh::LOAD_PLY namespace:cv::viz classpath:Mesh classname:Mesh name:LOAD_PLY
parse_name: const cv.viz.Mesh.LOAD_OBJ with ['cv', 'cv::viz'] -> fullname:cv::viz::Mesh::LOAD_OBJ namespace:cv::viz classpath:Mesh classname:Mesh name:LOAD_OBJ

--- Incoming ---
[   'cv.viz.Mesh.load',
    'Mesh',
    ['/S'],
    [['const String&', 'file', '', []], ['int', 'type', 'LOAD_PLY', []]],
    None,
    '@brief Loads a mesh from a ply or a obj file.\n'
    '\n'
    '@param file File name\n'
    '@param type File type (for now only PLY and OBJ are supported)\n'
    '\n'
    '**File type** can be one of the following:\n'
    '-   **LOAD_PLY**\n'
    '-   **LOAD_OBJ**']
parse_name: cv.viz.Mesh.load with ['cv', 'cv::viz'] -> fullname:cv::viz::Mesh::load namespace:cv::viz classpath:Mesh classname:Mesh name:load
register (method) load in cv::viz::Mesh (cv_viz_Mesh_load_String_int)

--- Incoming ---
[   'class cv.viz.Camera',
    '',
    [],
    [],
    None,
    '@brief This class wraps intrinsic parameters of a camera.\n'
    '\n'
    'It provides several constructors that can extract the intrinsic '
    'parameters from field of\n'
    'view, intrinsic matrix and projection matrix. :']
parse_name: class cv.viz.Camera with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera namespace:cv::viz classpath: classname: name:Camera
register class cv::viz::Camera (['class cv.viz.Camera', '', [], [], None, '@brief This class wraps intrinsic parameters of a camera.\n\nIt provides several constructors that can extract the intrinsic parameters from field of\nview, intrinsic matrix and projection matrix. :'])

--- Incoming ---
[   'cv.viz.Camera.Camera',
    'C',
    [],
    [   ['double', 'fx', '', []],
        ['double', 'fy', '', []],
        ['double', 'cx', '', []],
        ['double', 'cy', '', []],
        ['const Size &', 'window_size', '', []]],
    None,
    '@brief Constructs a Camera.\n'
    '\n'
    '@param fx Horizontal focal length.\n'
    '@param fy Vertical focal length.\n'
    '@param cx x coordinate of the principal point.\n'
    '@param cy y coordinate of the principal point.\n'
    '@param window_size Size of the window. This together with focal length '
    'and principal\n'
    'point determines the field of view.']
parse_name: cv.viz.Camera.Camera with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::Camera namespace:cv::viz classpath:Camera classname:Camera name:Camera
register (constructor) new in cv::viz::Camera (cv_viz_Camera_Camera_double_double_double_double_Size)

--- Incoming ---
[   'cv.viz.Camera.Camera',
    'C',
    [],
    [['const Vec2d &', 'fov', '', []], ['const Size &', 'window_size', '', []]],
    None,
    '@overload\n'
    '@param fov Field of view (horizontal, vertical)\n'
    '@param window_size Size of the window. Principal point is at the center '
    'of the window\n'
    'by default.']
parse_name: cv.viz.Camera.Camera with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::Camera namespace:cv::viz classpath:Camera classname:Camera name:Camera
register (constructor) new in cv::viz::Camera (cv_viz_Camera_Camera_Vec2d_Size)

--- Incoming ---
[   'cv.viz.Camera.Camera',
    'C',
    [],
    [['const Matx33d &', 'K', '', []], ['const Size &', 'window_size', '', []]],
    None,
    '@overload\n'
    '@param K Intrinsic matrix of the camera with the following form\n'
    '\\f[\n'
    '\\begin{bmatrix}\n'
    'f_x &   0 & c_x\\\\\n'
    '0 & f_y & c_y\\\\\n'
    '0 &   0 &   1\\\\\n'
    '\\end{bmatrix}\n'
    '\\f]\n'
    '@param window_size Size of the window. This together with intrinsic '
    'matrix determines\n'
    'the field of view.']
parse_name: cv.viz.Camera.Camera with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::Camera namespace:cv::viz classpath:Camera classname:Camera name:Camera
Registering an unknown type: Matx33d
register (constructor) new in cv::viz::Camera (cv_viz_Camera_Camera_Matx33d_Size)

--- Incoming ---
[   'cv.viz.Camera.Camera',
    'C',
    ['/E'],
    [   ['const Matx44d &', 'proj', '', []],
        ['const Size &', 'window_size', '', []]],
    None,
    '@overload\n'
    '@param proj Projection matrix of the camera with the following form\n'
    '\\f[\n'
    '\\begin{bmatrix}\n'
    '\\frac{2n}{r-l} &        0       & \\frac{r+l}{r-l}  & 0\\\\\n'
    '0        & \\frac{2n}{t-b} & \\frac{t+b}{t-b}  & 0\\\\\n'
    '0        &        0       & -\\frac{f+n}{f-n} & -\\frac{2fn}{f-n}\\\\\n'
    '0        &        0       & -1               & 0\\\\\n'
    '\\end{bmatrix}\n'
    '\\f]\n'
    '\n'
    '@param window_size Size of the window. This together with projection '
    'matrix determines\n'
    'the field of view.']
parse_name: cv.viz.Camera.Camera with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::Camera namespace:cv::viz classpath:Camera classname:Camera name:Camera
Registering an unknown type: Matx44d
register (constructor) new in cv::viz::Camera (cv_viz_Camera_Camera_Matx44d_Size)

--- Incoming ---
['cv.viz.Camera.getClip', 'const Vec2d &', ['/C'], [], None, '']
parse_name: cv.viz.Camera.getClip with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::getClip namespace:cv::viz classpath:Camera classname:Camera name:getClip
register (method) getClip in cv::viz::Camera (cv_viz_Camera_getClip_const)

--- Incoming ---
[   'cv.viz.Camera.setClip',
    'void',
    [],
    [['const Vec2d &', 'clip', '', []]],
    None,
    '']
parse_name: cv.viz.Camera.setClip with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::setClip namespace:cv::viz classpath:Camera classname:Camera name:setClip
register (method) setClip in cv::viz::Camera (cv_viz_Camera_setClip_Vec2d)

--- Incoming ---
['cv.viz.Camera.getWindowSize', 'const Size &', ['/C'], [], None, '']
parse_name: cv.viz.Camera.getWindowSize with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::getWindowSize namespace:cv::viz classpath:Camera classname:Camera name:getWindowSize
register (method) getWindowSize in cv::viz::Camera (cv_viz_Camera_getWindowSize_const)

--- Incoming ---
[   'cv.viz.Camera.setWindowSize',
    'void',
    [],
    [['const Size &', 'window_size', '', []]],
    None,
    '']
parse_name: cv.viz.Camera.setWindowSize with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::setWindowSize namespace:cv::viz classpath:Camera classname:Camera name:setWindowSize
register (method) setWindowSize in cv::viz::Camera (cv_viz_Camera_setWindowSize_Size)

--- Incoming ---
['cv.viz.Camera.getFov', 'const Vec2d&', ['/C'], [], None, '']
parse_name: cv.viz.Camera.getFov with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::getFov namespace:cv::viz classpath:Camera classname:Camera name:getFov
register (method) getFov in cv::viz::Camera (cv_viz_Camera_getFov_const)

--- Incoming ---
[   'cv.viz.Camera.setFov',
    'void',
    [],
    [['const Vec2d&', 'fov', '', []]],
    None,
    '']
parse_name: cv.viz.Camera.setFov with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::setFov namespace:cv::viz classpath:Camera classname:Camera name:setFov
register (method) setFov in cv::viz::Camera (cv_viz_Camera_setFov_Vec2d)

--- Incoming ---
['cv.viz.Camera.getPrincipalPoint', 'const Vec2d&', ['/C'], [], None, '']
parse_name: cv.viz.Camera.getPrincipalPoint with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::getPrincipalPoint namespace:cv::viz classpath:Camera classname:Camera name:getPrincipalPoint
register (method) getPrincipalPoint in cv::viz::Camera (cv_viz_Camera_getPrincipalPoint_const)

--- Incoming ---
['cv.viz.Camera.getFocalLength', 'const Vec2d&', ['/C'], [], None, '']
parse_name: cv.viz.Camera.getFocalLength with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::getFocalLength namespace:cv::viz classpath:Camera classname:Camera name:getFocalLength
register (method) getFocalLength in cv::viz::Camera (cv_viz_Camera_getFocalLength_const)

--- Incoming ---
[   'cv.viz.Camera.computeProjectionMatrix',
    'void',
    ['/C'],
    [['Matx44d &', 'proj', '', []]],
    None,
    '@brief Computes projection matrix using intrinsic parameters of the '
    'camera.\n'
    '\n'
    '\n'
    '@param proj Output projection matrix with the following form\n'
    '\\f[\n'
    '\\begin{bmatrix}\n'
    '\\frac{2n}{r-l} &        0       & \\frac{r+l}{r-l}  & 0\\\\\n'
    '0        & \\frac{2n}{t-b} & \\frac{t+b}{t-b}  & 0\\\\\n'
    '0        &        0       & -\\frac{f+n}{f-n} & -\\frac{2fn}{f-n}\\\\\n'
    '0        &        0       & -1               & 0\\\\\n'
    '\\end{bmatrix}\n'
    '\\f]']
parse_name: cv.viz.Camera.computeProjectionMatrix with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::computeProjectionMatrix namespace:cv::viz classpath:Camera classname:Camera name:computeProjectionMatrix
Registering an unknown type: Matx44d
register (method) computeProjectionMatrix in cv::viz::Camera (cv_viz_Camera_computeProjectionMatrix_const_Matx44d)

--- Incoming ---
[   'cv.viz.Camera.KinectCamera',
    'Camera',
    ['/S'],
    [['const Size &', 'window_size', '', []]],
    None,
    '@brief Creates a Kinect Camera with\n'
    '- fx = fy = 525\n'
    '- cx = 320\n'
    '- cy = 240\n'
    '\n'
    '@param window_size Size of the window. This together with intrinsic '
    'matrix of a Kinect Camera\n'
    'determines the field of view.']
parse_name: cv.viz.Camera.KinectCamera with ['cv', 'cv::viz'] -> fullname:cv::viz::Camera::KinectCamera namespace:cv::viz classpath:Camera classname:Camera name:KinectCamera
register (method) KinectCamera in cv::viz::Camera (cv_viz_Camera_KinectCamera_Size)

--- Incoming ---
[   'class cv.viz.KeyboardEvent',
    '',
    [],
    [],
    None,
    '@brief This class represents a keyboard event.']
parse_name: class cv.viz.KeyboardEvent with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent namespace:cv::viz classpath: classname: name:KeyboardEvent
register class cv::viz::KeyboardEvent (['class cv.viz.KeyboardEvent', '', [], [], None, '@brief This class represents a keyboard event.'])

--- Incoming ---
[   'enum cv.viz.KeyboardEvent.<unnamed>',
    '',
    [],
    [   ['const cv.viz.KeyboardEvent.NONE', '0', [], [], None, ''],
        ['const cv.viz.KeyboardEvent.ALT', '1', [], [], None, ''],
        ['const cv.viz.KeyboardEvent.CTRL', '2', [], [], None, ''],
        ['const cv.viz.KeyboardEvent.SHIFT', '4', [], [], None, '']],
    None,
    '']
parse_name: const cv.viz.KeyboardEvent.NONE with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent::NONE namespace:cv::viz classpath:KeyboardEvent classname:KeyboardEvent name:NONE
parse_name: const cv.viz.KeyboardEvent.ALT with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent::ALT namespace:cv::viz classpath:KeyboardEvent classname:KeyboardEvent name:ALT
parse_name: const cv.viz.KeyboardEvent.CTRL with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent::CTRL namespace:cv::viz classpath:KeyboardEvent classname:KeyboardEvent name:CTRL
parse_name: const cv.viz.KeyboardEvent.SHIFT with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent::SHIFT namespace:cv::viz classpath:KeyboardEvent classname:KeyboardEvent name:SHIFT

--- Incoming ---
[   'enum cv.viz.KeyboardEvent.Action',
    '',
    [],
    [   ['const cv.viz.KeyboardEvent.KEY_UP', '0', [], [], None, ''],
        ['const cv.viz.KeyboardEvent.KEY_DOWN', '1', [], [], None, '']],
    None,
    '']
parse_name: const cv.viz.KeyboardEvent.KEY_UP with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent::KEY_UP namespace:cv::viz classpath:KeyboardEvent classname:KeyboardEvent name:KEY_UP
parse_name: const cv.viz.KeyboardEvent.KEY_DOWN with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent::KEY_DOWN namespace:cv::viz classpath:KeyboardEvent classname:KeyboardEvent name:KEY_DOWN
parse_name: enum cv.viz.KeyboardEvent.Action with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent::Action namespace:cv::viz classpath:KeyboardEvent classname:KeyboardEvent name:Action
parse_name: const cv.viz.KeyboardEvent.KEY_UP with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent::KEY_UP namespace:cv::viz classpath:KeyboardEvent classname:KeyboardEvent name:KEY_UP
parse_name: const cv.viz.KeyboardEvent.KEY_DOWN with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent::KEY_DOWN namespace:cv::viz classpath:KeyboardEvent classname:KeyboardEvent name:KEY_DOWN

--- Incoming ---
[   'cv.viz.KeyboardEvent.KeyboardEvent',
    'K',
    [],
    [   ['Action', 'action', '', []],
        ['const String&', 'symbol', '', []],
        ['unsigned char', 'code', '', []],
        ['int', 'modifiers', '', []]],
    None,
    '@brief Constructs a KeyboardEvent.\n'
    '\n'
    '@param action Signals if key is pressed or released.\n'
    '@param symbol Name of the key.\n'
    '@param code Code of the key.\n'
    '@param modifiers Signals if alt, ctrl or shift are pressed or their '
    'combination.']
parse_name: cv.viz.KeyboardEvent.KeyboardEvent with ['cv', 'cv::viz'] -> fullname:cv::viz::KeyboardEvent::KeyboardEvent namespace:cv::viz classpath:KeyboardEvent classname:KeyboardEvent name:KeyboardEvent
Registering an unknown type: Action
register (constructor) new in cv::viz::KeyboardEvent (cv_viz_KeyboardEvent_KeyboardEvent_Action_String_unsigned_char_int)

--- Incoming ---
[   'class cv.viz.MouseEvent',
    '',
    [],
    [],
    None,
    '@brief This class represents a mouse event.']
parse_name: class cv.viz.MouseEvent with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent namespace:cv::viz classpath: classname: name:MouseEvent
register class cv::viz::MouseEvent (['class cv.viz.MouseEvent', '', [], [], None, '@brief This class represents a mouse event.'])

--- Incoming ---
[   'enum cv.viz.MouseEvent.Type',
    '',
    [],
    [   ['const cv.viz.MouseEvent.MouseMove', '1', [], [], None, ''],
        ['const cv.viz.MouseEvent.MouseButtonPress', '1+1', [], [], None, ''],
        ['const cv.viz.MouseEvent.MouseButtonRelease', '1+2', [], [], None, ''],
        ['const cv.viz.MouseEvent.MouseScrollDown', '1+3', [], [], None, ''],
        ['const cv.viz.MouseEvent.MouseScrollUp', '1+4', [], [], None, ''],
        ['const cv.viz.MouseEvent.MouseDblClick', '1+5', [], [], None, '']],
    None,
    '']
parse_name: const cv.viz.MouseEvent.MouseMove with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseMove namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseMove
parse_name: const cv.viz.MouseEvent.MouseButtonPress with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseButtonPress namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseButtonPress
parse_name: const cv.viz.MouseEvent.MouseButtonRelease with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseButtonRelease namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseButtonRelease
parse_name: const cv.viz.MouseEvent.MouseScrollDown with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseScrollDown namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseScrollDown
parse_name: const cv.viz.MouseEvent.MouseScrollUp with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseScrollUp namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseScrollUp
parse_name: const cv.viz.MouseEvent.MouseDblClick with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseDblClick namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseDblClick
parse_name: enum cv.viz.MouseEvent.Type with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::Type namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:Type
parse_name: const cv.viz.MouseEvent.MouseMove with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseMove namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseMove
parse_name: const cv.viz.MouseEvent.MouseButtonPress with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseButtonPress namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseButtonPress
parse_name: const cv.viz.MouseEvent.MouseButtonRelease with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseButtonRelease namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseButtonRelease
parse_name: const cv.viz.MouseEvent.MouseScrollDown with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseScrollDown namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseScrollDown
parse_name: const cv.viz.MouseEvent.MouseScrollUp with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseScrollUp namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseScrollUp
parse_name: const cv.viz.MouseEvent.MouseDblClick with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseDblClick namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseDblClick

--- Incoming ---
[   'enum cv.viz.MouseEvent.MouseButton',
    '',
    [],
    [   ['const cv.viz.MouseEvent.NoButton', '0', [], [], None, ''],
        ['const cv.viz.MouseEvent.LeftButton', '0+1', [], [], None, ''],
        ['const cv.viz.MouseEvent.MiddleButton', '0+2', [], [], None, ''],
        ['const cv.viz.MouseEvent.RightButton', '0+3', [], [], None, ''],
        ['const cv.viz.MouseEvent.VScroll', '0+4', [], [], None, '']],
    None,
    '']
parse_name: const cv.viz.MouseEvent.NoButton with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::NoButton namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:NoButton
parse_name: const cv.viz.MouseEvent.LeftButton with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::LeftButton namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:LeftButton
parse_name: const cv.viz.MouseEvent.MiddleButton with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MiddleButton namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MiddleButton
parse_name: const cv.viz.MouseEvent.RightButton with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::RightButton namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:RightButton
parse_name: const cv.viz.MouseEvent.VScroll with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::VScroll namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:VScroll
parse_name: enum cv.viz.MouseEvent.MouseButton with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseButton namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseButton
parse_name: const cv.viz.MouseEvent.NoButton with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::NoButton namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:NoButton
parse_name: const cv.viz.MouseEvent.LeftButton with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::LeftButton namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:LeftButton
parse_name: const cv.viz.MouseEvent.MiddleButton with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MiddleButton namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MiddleButton
parse_name: const cv.viz.MouseEvent.RightButton with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::RightButton namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:RightButton
parse_name: const cv.viz.MouseEvent.VScroll with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::VScroll namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:VScroll

--- Incoming ---
[   'cv.viz.MouseEvent.MouseEvent',
    'M',
    [],
    [   ['const Type&', 'type', '', []],
        ['const MouseButton&', 'button', '', []],
        ['const Point&', 'pointer', '', []],
        ['int', 'modifiers', '', []]],
    None,
    '@brief Constructs a MouseEvent.\n'
    '\n'
    '@param type Type of the event. This can be **MouseMove**, '
    '**MouseButtonPress**,\n'
    '**MouseButtonRelease**, **MouseScrollDown**, **MouseScrollUp**, '
    '**MouseDblClick**.\n'
    '@param button Mouse button. This can be **NoButton**, **LeftButton**, '
    '**MiddleButton**,\n'
    '**RightButton**, **VScroll**.\n'
    '@param pointer Position of the event.\n'
    '@param modifiers Signals if alt, ctrl or shift are pressed or their '
    'combination.']
parse_name: cv.viz.MouseEvent.MouseEvent with ['cv', 'cv::viz'] -> fullname:cv::viz::MouseEvent::MouseEvent namespace:cv::viz classpath:MouseEvent classname:MouseEvent name:MouseEvent
Registering an unknown type: Type
Registering an unknown type: MouseButton
register (constructor) new in cv::viz::MouseEvent (cv_viz_MouseEvent_MouseEvent_Type_MouseButton_Point_int)

--- Incoming ---
['cv.viz.Color.Color', 'c', [], [], None, '@cond IGNORED']
parse_name: cv.viz.Color.Color with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::Color namespace:cv::viz classpath:Color classname:Color name:Color
register (constructor) default in cv::viz::Color (cv_viz_Color_Color)

--- Incoming ---
['cv.viz.Color.Color', 'c', [], [['double', '_gray', '', []]], None, '']
parse_name: cv.viz.Color.Color with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::Color namespace:cv::viz classpath:Color classname:Color name:Color
register (constructor) new in cv::viz::Color (cv_viz_Color_Color_double)

--- Incoming ---
[   'cv.viz.Color.Color',
    'c',
    [],
    [   ['double', '_blue', '', []],
        ['double', '_green', '', []],
        ['double', '_red', '', []]],
    None,
    '']
parse_name: cv.viz.Color.Color with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::Color namespace:cv::viz classpath:Color classname:Color name:Color
register (constructor) new in cv::viz::Color (cv_viz_Color_Color_double_double_double)

--- Incoming ---
['cv.viz.Color.Color', 'c', [], [['const Scalar&', 'color', '', []]], None, '']
parse_name: cv.viz.Color.Color with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::Color namespace:cv::viz classpath:Color classname:Color name:Color
register (constructor) new in cv::viz::Color (cv_viz_Color_Color_Scalar)

--- Incoming ---
['cv.Vec3b', '', ['/C'], [], None, '']
parse_name: cv.Vec3b with ['cv', 'cv::viz'] -> fullname:cv::Vec3b namespace:cv classpath: classname: name:Vec3b
register (function) Vec3b (cv_Vec3b_const)

--- Incoming ---
['cv.viz.Color.black', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.black with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::black namespace:cv::viz classpath:Color classname:Color name:black
register (method) black in cv::viz::Color (cv_viz_Color_black)

--- Incoming ---
['cv.viz.Color.green', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.green with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::green namespace:cv::viz classpath:Color classname:Color name:green
register (method) green in cv::viz::Color (cv_viz_Color_green)

--- Incoming ---
['cv.viz.Color.blue', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.blue with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::blue namespace:cv::viz classpath:Color classname:Color name:blue
register (method) blue in cv::viz::Color (cv_viz_Color_blue)

--- Incoming ---
['cv.viz.Color.cyan', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.cyan with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::cyan namespace:cv::viz classpath:Color classname:Color name:cyan
register (method) cyan in cv::viz::Color (cv_viz_Color_cyan)

--- Incoming ---
['cv.viz.Color.red', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.red with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::red namespace:cv::viz classpath:Color classname:Color name:red
register (method) red in cv::viz::Color (cv_viz_Color_red)

--- Incoming ---
['cv.viz.Color.yellow', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.yellow with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::yellow namespace:cv::viz classpath:Color classname:Color name:yellow
register (method) yellow in cv::viz::Color (cv_viz_Color_yellow)

--- Incoming ---
['cv.viz.Color.magenta', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.magenta with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::magenta namespace:cv::viz classpath:Color classname:Color name:magenta
register (method) magenta in cv::viz::Color (cv_viz_Color_magenta)

--- Incoming ---
['cv.viz.Color.white', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.white with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::white namespace:cv::viz classpath:Color classname:Color name:white
register (method) white in cv::viz::Color (cv_viz_Color_white)

--- Incoming ---
['cv.viz.Color.gray', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.gray with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::gray namespace:cv::viz classpath:Color classname:Color name:gray
register (method) gray in cv::viz::Color (cv_viz_Color_gray)

--- Incoming ---
['cv.viz.Color.mlab', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.mlab with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::mlab namespace:cv::viz classpath:Color classname:Color name:mlab
register (method) mlab in cv::viz::Color (cv_viz_Color_mlab)

--- Incoming ---
['cv.viz.Color.navy', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.navy with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::navy namespace:cv::viz classpath:Color classname:Color name:navy
register (method) navy in cv::viz::Color (cv_viz_Color_navy)

--- Incoming ---
['cv.viz.Color.olive', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.olive with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::olive namespace:cv::viz classpath:Color classname:Color name:olive
register (method) olive in cv::viz::Color (cv_viz_Color_olive)

--- Incoming ---
['cv.viz.Color.maroon', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.maroon with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::maroon namespace:cv::viz classpath:Color classname:Color name:maroon
register (method) maroon in cv::viz::Color (cv_viz_Color_maroon)

--- Incoming ---
['cv.viz.Color.teal', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.teal with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::teal namespace:cv::viz classpath:Color classname:Color name:teal
register (method) teal in cv::viz::Color (cv_viz_Color_teal)

--- Incoming ---
['cv.viz.Color.rose', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.rose with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::rose namespace:cv::viz classpath:Color classname:Color name:rose
register (method) rose in cv::viz::Color (cv_viz_Color_rose)

--- Incoming ---
['cv.viz.Color.azure', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.azure with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::azure namespace:cv::viz classpath:Color classname:Color name:azure
register (method) azure in cv::viz::Color (cv_viz_Color_azure)

--- Incoming ---
['cv.viz.Color.lime', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.lime with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::lime namespace:cv::viz classpath:Color classname:Color name:lime
register (method) lime in cv::viz::Color (cv_viz_Color_lime)

--- Incoming ---
['cv.viz.Color.gold', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.gold with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::gold namespace:cv::viz classpath:Color classname:Color name:gold
register (method) gold in cv::viz::Color (cv_viz_Color_gold)

--- Incoming ---
['cv.viz.Color.brown', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.brown with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::brown namespace:cv::viz classpath:Color classname:Color name:brown
register (method) brown in cv::viz::Color (cv_viz_Color_brown)

--- Incoming ---
['cv.viz.Color.orange', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.orange with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::orange namespace:cv::viz classpath:Color classname:Color name:orange
register (method) orange in cv::viz::Color (cv_viz_Color_orange)

--- Incoming ---
['cv.viz.Color.chartreuse', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.chartreuse with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::chartreuse namespace:cv::viz classpath:Color classname:Color name:chartreuse
register (method) chartreuse in cv::viz::Color (cv_viz_Color_chartreuse)

--- Incoming ---
['cv.viz.Color.orange_red', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.orange_red with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::orange_red namespace:cv::viz classpath:Color classname:Color name:orange_red
register (method) orange_red in cv::viz::Color (cv_viz_Color_orange_red)

--- Incoming ---
['cv.viz.Color.purple', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.purple with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::purple namespace:cv::viz classpath:Color classname:Color name:purple
register (method) purple in cv::viz::Color (cv_viz_Color_purple)

--- Incoming ---
['cv.viz.Color.indigo', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.indigo with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::indigo namespace:cv::viz classpath:Color classname:Color name:indigo
register (method) indigo in cv::viz::Color (cv_viz_Color_indigo)

--- Incoming ---
['cv.viz.Color.pink', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.pink with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::pink namespace:cv::viz classpath:Color classname:Color name:pink
register (method) pink in cv::viz::Color (cv_viz_Color_pink)

--- Incoming ---
['cv.viz.Color.cherry', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.cherry with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::cherry namespace:cv::viz classpath:Color classname:Color name:cherry
register (method) cherry in cv::viz::Color (cv_viz_Color_cherry)

--- Incoming ---
['cv.viz.Color.bluberry', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.bluberry with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::bluberry namespace:cv::viz classpath:Color classname:Color name:bluberry
register (method) bluberry in cv::viz::Color (cv_viz_Color_bluberry)

--- Incoming ---
['cv.viz.Color.raspberry', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.raspberry with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::raspberry namespace:cv::viz classpath:Color classname:Color name:raspberry
register (method) raspberry in cv::viz::Color (cv_viz_Color_raspberry)

--- Incoming ---
['cv.viz.Color.silver', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.silver with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::silver namespace:cv::viz classpath:Color classname:Color name:silver
register (method) silver in cv::viz::Color (cv_viz_Color_silver)

--- Incoming ---
['cv.viz.Color.violet', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.violet with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::violet namespace:cv::viz classpath:Color classname:Color name:violet
register (method) violet in cv::viz::Color (cv_viz_Color_violet)

--- Incoming ---
['cv.viz.Color.apricot', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.apricot with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::apricot namespace:cv::viz classpath:Color classname:Color name:apricot
register (method) apricot in cv::viz::Color (cv_viz_Color_apricot)

--- Incoming ---
['cv.viz.Color.turquoise', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.turquoise with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::turquoise namespace:cv::viz classpath:Color classname:Color name:turquoise
register (method) turquoise in cv::viz::Color (cv_viz_Color_turquoise)

--- Incoming ---
['cv.viz.Color.celestial_blue', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.celestial_blue with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::celestial_blue namespace:cv::viz classpath:Color classname:Color name:celestial_blue
register (method) celestial_blue in cv::viz::Color (cv_viz_Color_celestial_blue)

--- Incoming ---
['cv.viz.Color.amethyst', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.amethyst with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::amethyst namespace:cv::viz classpath:Color classname:Color name:amethyst
register (method) amethyst in cv::viz::Color (cv_viz_Color_amethyst)

--- Incoming ---
['cv.viz.Color.not_set', 'cv::viz::Color', [], [], None, '']
parse_name: cv.viz.Color.not_set with ['cv', 'cv::viz'] -> fullname:cv::viz::Color::not_set namespace:cv::viz classpath:Color classname:Color name:not_set
register (method) not_set in cv::viz::Color (cv_viz_Color_not_set)


=============== Header: /Users/calumbruton/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.26.6/headers/4.1/opencv2/viz/widgets.hpp ================


Namespaces: ['cv', 'cv.viz']
Comment: {}

--- Incoming ---
[   'enum cv.viz.RenderingProperties',
    '',
    [],
    [   ['const cv.viz.POINT_SIZE', '0', [], [], None, ''],
        ['const cv.viz.OPACITY', '1', [], [], None, ''],
        ['const cv.viz.LINE_WIDTH', '2', [], [], None, ''],
        ['const cv.viz.FONT_SIZE', '3', [], [], None, ''],
        ['const cv.viz.REPRESENTATION', '4', [], [], None, ''],
        ['const cv.viz.IMMEDIATE_RENDERING', '5', [], [], None, ''],
        ['const cv.viz.SHADING', '6', [], [], None, ''],
        ['const cv.viz.AMBIENT', '7', [], [], None, ''],
        ['const cv.viz.LIGHTING', '8', [], [], None, '']],
    None,
    '@addtogroup viz_widget\n@{']
parse_name: const cv.viz.POINT_SIZE with ['cv', 'cv::viz'] -> fullname:cv::viz::POINT_SIZE namespace:cv::viz classpath: classname: name:POINT_SIZE
parse_name: const cv.viz.OPACITY with ['cv', 'cv::viz'] -> fullname:cv::viz::OPACITY namespace:cv::viz classpath: classname: name:OPACITY
parse_name: const cv.viz.LINE_WIDTH with ['cv', 'cv::viz'] -> fullname:cv::viz::LINE_WIDTH namespace:cv::viz classpath: classname: name:LINE_WIDTH
parse_name: const cv.viz.FONT_SIZE with ['cv', 'cv::viz'] -> fullname:cv::viz::FONT_SIZE namespace:cv::viz classpath: classname: name:FONT_SIZE
parse_name: const cv.viz.REPRESENTATION with ['cv', 'cv::viz'] -> fullname:cv::viz::REPRESENTATION namespace:cv::viz classpath: classname: name:REPRESENTATION
parse_name: const cv.viz.IMMEDIATE_RENDERING with ['cv', 'cv::viz'] -> fullname:cv::viz::IMMEDIATE_RENDERING namespace:cv::viz classpath: classname: name:IMMEDIATE_RENDERING
parse_name: const cv.viz.SHADING with ['cv', 'cv::viz'] -> fullname:cv::viz::SHADING namespace:cv::viz classpath: classname: name:SHADING
parse_name: const cv.viz.AMBIENT with ['cv', 'cv::viz'] -> fullname:cv::viz::AMBIENT namespace:cv::viz classpath: classname: name:AMBIENT
parse_name: const cv.viz.LIGHTING with ['cv', 'cv::viz'] -> fullname:cv::viz::LIGHTING namespace:cv::viz classpath: classname: name:LIGHTING
parse_name: enum cv.viz.RenderingProperties with ['cv', 'cv::viz'] -> fullname:cv::viz::RenderingProperties namespace:cv::viz classpath: classname: name:RenderingProperties
parse_name: const cv.viz.POINT_SIZE with ['cv', 'cv::viz'] -> fullname:cv::viz::POINT_SIZE namespace:cv::viz classpath: classname: name:POINT_SIZE
parse_name: const cv.viz.OPACITY with ['cv', 'cv::viz'] -> fullname:cv::viz::OPACITY namespace:cv::viz classpath: classname: name:OPACITY
parse_name: const cv.viz.LINE_WIDTH with ['cv', 'cv::viz'] -> fullname:cv::viz::LINE_WIDTH namespace:cv::viz classpath: classname: name:LINE_WIDTH
parse_name: const cv.viz.FONT_SIZE with ['cv', 'cv::viz'] -> fullname:cv::viz::FONT_SIZE namespace:cv::viz classpath: classname: name:FONT_SIZE
parse_name: const cv.viz.REPRESENTATION with ['cv', 'cv::viz'] -> fullname:cv::viz::REPRESENTATION namespace:cv::viz classpath: classname: name:REPRESENTATION
parse_name: const cv.viz.IMMEDIATE_RENDERING with ['cv', 'cv::viz'] -> fullname:cv::viz::IMMEDIATE_RENDERING namespace:cv::viz classpath: classname: name:IMMEDIATE_RENDERING
parse_name: const cv.viz.SHADING with ['cv', 'cv::viz'] -> fullname:cv::viz::SHADING namespace:cv::viz classpath: classname: name:SHADING
parse_name: const cv.viz.AMBIENT with ['cv', 'cv::viz'] -> fullname:cv::viz::AMBIENT namespace:cv::viz classpath: classname: name:AMBIENT
parse_name: const cv.viz.LIGHTING with ['cv', 'cv::viz'] -> fullname:cv::viz::LIGHTING namespace:cv::viz classpath: classname: name:LIGHTING

--- Incoming ---
[   'enum cv.viz.RepresentationValues',
    '',
    [],
    [   ['const cv.viz.REPRESENTATION_POINTS', '0', [], [], None, ''],
        ['const cv.viz.REPRESENTATION_WIREFRAME', '1', [], [], None, ''],
        ['const cv.viz.REPRESENTATION_SURFACE', '2', [], [], None, '']],
    None,
    '']
parse_name: const cv.viz.REPRESENTATION_POINTS with ['cv', 'cv::viz'] -> fullname:cv::viz::REPRESENTATION_POINTS namespace:cv::viz classpath: classname: name:REPRESENTATION_POINTS
parse_name: const cv.viz.REPRESENTATION_WIREFRAME with ['cv', 'cv::viz'] -> fullname:cv::viz::REPRESENTATION_WIREFRAME namespace:cv::viz classpath: classname: name:REPRESENTATION_WIREFRAME
parse_name: const cv.viz.REPRESENTATION_SURFACE with ['cv', 'cv::viz'] -> fullname:cv::viz::REPRESENTATION_SURFACE namespace:cv::viz classpath: classname: name:REPRESENTATION_SURFACE
parse_name: enum cv.viz.RepresentationValues with ['cv', 'cv::viz'] -> fullname:cv::viz::RepresentationValues namespace:cv::viz classpath: classname: name:RepresentationValues
parse_name: const cv.viz.REPRESENTATION_POINTS with ['cv', 'cv::viz'] -> fullname:cv::viz::REPRESENTATION_POINTS namespace:cv::viz classpath: classname: name:REPRESENTATION_POINTS
parse_name: const cv.viz.REPRESENTATION_WIREFRAME with ['cv', 'cv::viz'] -> fullname:cv::viz::REPRESENTATION_WIREFRAME namespace:cv::viz classpath: classname: name:REPRESENTATION_WIREFRAME
parse_name: const cv.viz.REPRESENTATION_SURFACE with ['cv', 'cv::viz'] -> fullname:cv::viz::REPRESENTATION_SURFACE namespace:cv::viz classpath: classname: name:REPRESENTATION_SURFACE

--- Incoming ---
[   'enum cv.viz.ShadingValues',
    '',
    [],
    [   ['const cv.viz.SHADING_FLAT', '0', [], [], None, ''],
        ['const cv.viz.SHADING_GOURAUD', '1', [], [], None, ''],
        ['const cv.viz.SHADING_PHONG', '2', [], [], None, '']],
    None,
    '']
parse_name: const cv.viz.SHADING_FLAT with ['cv', 'cv::viz'] -> fullname:cv::viz::SHADING_FLAT namespace:cv::viz classpath: classname: name:SHADING_FLAT
parse_name: const cv.viz.SHADING_GOURAUD with ['cv', 'cv::viz'] -> fullname:cv::viz::SHADING_GOURAUD namespace:cv::viz classpath: classname: name:SHADING_GOURAUD
parse_name: const cv.viz.SHADING_PHONG with ['cv', 'cv::viz'] -> fullname:cv::viz::SHADING_PHONG namespace:cv::viz classpath: classname: name:SHADING_PHONG
parse_name: enum cv.viz.ShadingValues with ['cv', 'cv::viz'] -> fullname:cv::viz::ShadingValues namespace:cv::viz classpath: classname: name:ShadingValues
parse_name: const cv.viz.SHADING_FLAT with ['cv', 'cv::viz'] -> fullname:cv::viz::SHADING_FLAT namespace:cv::viz classpath: classname: name:SHADING_FLAT
parse_name: const cv.viz.SHADING_GOURAUD with ['cv', 'cv::viz'] -> fullname:cv::viz::SHADING_GOURAUD namespace:cv::viz classpath: classname: name:SHADING_GOURAUD
parse_name: const cv.viz.SHADING_PHONG with ['cv', 'cv::viz'] -> fullname:cv::viz::SHADING_PHONG namespace:cv::viz classpath: classname: name:SHADING_PHONG

--- Incoming ---
[   'class cv.viz.Widget',
    '',
    [],
    [],
    None,
    '@brief Base class of all widgets. Widget is implicitly shared.']
parse_name: class cv.viz.Widget with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget namespace:cv::viz classpath: classname: name:Widget
register class cv::viz::Widget (['class cv.viz.Widget', '', [], [], None, '@brief Base class of all widgets. Widget is implicitly shared.'])

--- Incoming ---
['cv.viz.Widget.Widget', 'W', [], [], None, '']
parse_name: cv.viz.Widget.Widget with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::Widget namespace:cv::viz classpath:Widget classname:Widget name:Widget
register (constructor) default in cv::viz::Widget (cv_viz_Widget_Widget)

--- Incoming ---
[   'cv.viz.Widget.Widget',
    'W',
    [],
    [['const Widget&', 'other', '', []]],
    None,
    '']
parse_name: cv.viz.Widget.Widget with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::Widget namespace:cv::viz classpath:Widget classname:Widget name:Widget
register (constructor) copy in cv::viz::Widget (cv_viz_Widget_Widget_Widget)

--- Incoming ---
[   'cv.viz.Widget.operator=',
    'Widget&',
    [],
    [['const Widget&', 'other', '', []]],
    None,
    '']
parse_name: cv.viz.Widget.operator= with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::operator= namespace:cv::viz classpath:Widget classname:Widget name:operator=
ignore (method) operator= in cv::viz::Widget

--- Incoming ---
['cv.viz.Widget.~Widget', '~', [], [], None, '']
parse_name: cv.viz.Widget.~Widget with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::~Widget namespace:cv::viz classpath:Widget classname:Widget name:~Widget
Registering an unknown type: ~
ignore destructor (method) ~Widget in cv::viz::Widget

--- Incoming ---
[   'cv.viz.Widget.fromPlyFile',
    'Widget',
    ['/S'],
    [['const String &', 'file_name', '', []]],
    None,
    '@brief Creates a widget from ply file.\n\n@param file_name Ply file name.']
parse_name: cv.viz.Widget.fromPlyFile with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::fromPlyFile namespace:cv::viz classpath:Widget classname:Widget name:fromPlyFile
register (method) fromPlyFile in cv::viz::Widget (cv_viz_Widget_fromPlyFile_String)

--- Incoming ---
[   'cv.viz.Widget.setRenderingProperty',
    'void',
    [],
    [['int', 'property', '', []], ['double', 'value', '', []]],
    None,
    '@brief Sets rendering property of the widget.\n'
    '\n'
    '@param property Property that will be modified.\n'
    '@param value The new value of the property.\n'
    '\n'
    'Rendering property can be one of the following:\n'
    '-   **POINT_SIZE**\n'
    '-   **OPACITY**\n'
    '-   **LINE_WIDTH**\n'
    '-   **FONT_SIZE**\n'
    '\n'
    'REPRESENTATION: Expected values are\n'
    '-   **REPRESENTATION_POINTS**\n'
    '-   **REPRESENTATION_WIREFRAME**\n'
    '-   **REPRESENTATION_SURFACE**\n'
    '\n'
    'IMMEDIATE_RENDERING:\n'
    '-   Turn on immediate rendering by setting the value to 1.\n'
    '-   Turn off immediate rendering by setting the value to 0.\n'
    '\n'
    'SHADING: Expected values are\n'
    '-   **SHADING_FLAT**\n'
    '-   **SHADING_GOURAUD**\n'
    '-   **SHADING_PHONG**']
parse_name: cv.viz.Widget.setRenderingProperty with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::setRenderingProperty namespace:cv::viz classpath:Widget classname:Widget name:setRenderingProperty
register (method) setRenderingProperty in cv::viz::Widget (cv_viz_Widget_setRenderingProperty_int_double)

--- Incoming ---
[   'cv.viz.Widget.getRenderingProperty',
    'double',
    ['/C'],
    [['int', 'property', '', []]],
    None,
    '@brief Returns rendering property of the widget.\n'
    '\n'
    '@param property Property.\n'
    '\n'
    'Rendering property can be one of the following:\n'
    '-   **POINT_SIZE**\n'
    '-   **OPACITY**\n'
    '-   **LINE_WIDTH**\n'
    '-   **FONT_SIZE**\n'
    '-   **AMBIENT**\n'
    '\n'
    'REPRESENTATION: Expected values are\n'
    '-   **REPRESENTATION_POINTS**\n'
    '-   **REPRESENTATION_WIREFRAME**\n'
    '-   **REPRESENTATION_SURFACE**\n'
    '\n'
    '**IMMEDIATE_RENDERING**:\n'
    '-   Turn on immediate rendering by setting the value to 1.\n'
    '-   Turn off immediate rendering by setting the value to 0.\n'
    '\n'
    'SHADING: Expected values are\n'
    '-   **SHADING_FLAT**\n'
    '-   **SHADING_GOURAUD**\n'
    '-   **SHADING_PHONG**']
parse_name: cv.viz.Widget.getRenderingProperty with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::getRenderingProperty namespace:cv::viz classpath:Widget classname:Widget name:getRenderingProperty
register (method) getRenderingProperty in cv::viz::Widget (cv_viz_Widget_getRenderingProperty_const_int)

--- Incoming ---
[   'cv.viz.Widget.cast',
    'template<typename _W> _W',
    ['/C'],
    [],
    None,
    '@brief Casts a widget to another.\n'
    '\n'
    '@code\n'
    '// Create a sphere widget\n'
    'viz::WSphere sw(Point3f(0.0f,0.0f,0.0f), 0.5f);\n'
    '// Cast sphere widget to cloud widget\n'
    'viz::WCloud cw = sw.cast<viz::WCloud>();\n'
    '@endcode\n'
    '\n'
    '@note 3D Widgets can only be cast to 3D Widgets. 2D Widgets can only be '
    'cast to 2D Widgets.']
parse_name: cv.viz.Widget.cast with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast namespace:cv::viz classpath:Widget classname:Widget name:cast
Registering an unknown type: template<typename _W> _W
register (method) cast in cv::viz::Widget (cv_viz_Widget_cast_const)

--- Incoming ---
[   'class cv.viz.Widget3D',
    ': cv::viz::Widget',
    [],
    [],
    None,
    '@brief Base class of all 3D widgets.']
parse_name: class cv.viz.Widget3D with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget3D namespace:cv::viz classpath: classname: name:Widget3D
register class cv::viz::Widget3D (['class cv.viz.Widget3D', ': cv::viz::Widget', [], [], None, '@brief Base class of all 3D widgets.']) impl:cv::viz::Widget

--- Incoming ---
['cv.viz.Widget3D.Widget3D', 'W', [], [], None, '']
parse_name: cv.viz.Widget3D.Widget3D with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget3D::Widget3D namespace:cv::viz classpath:Widget3D classname:Widget3D name:Widget3D
register (constructor) default in cv::viz::Widget3D (cv_viz_Widget3D_Widget3D)

--- Incoming ---
[   'cv.viz.Widget3D.setPose',
    'void',
    [],
    [['const Affine3d &', 'pose', '', []]],
    None,
    '@brief Sets pose of the widget.\n'
    '\n'
    '@param pose The new pose of the widget.']
parse_name: cv.viz.Widget3D.setPose with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget3D::setPose namespace:cv::viz classpath:Widget3D classname:Widget3D name:setPose
Registering an unknown type: Affine3d
register (method) setPose in cv::viz::Widget3D (cv_viz_Widget3D_setPose_Affine3d)

--- Incoming ---
[   'cv.viz.Widget3D.updatePose',
    'void',
    [],
    [['const Affine3d &', 'pose', '', []]],
    None,
    '@brief Updates pose of the widget by pre-multiplying its current pose.\n'
    '\n'
    '@param pose The pose that the current pose of the widget will be '
    'pre-multiplied by.']
parse_name: cv.viz.Widget3D.updatePose with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget3D::updatePose namespace:cv::viz classpath:Widget3D classname:Widget3D name:updatePose
register (method) updatePose in cv::viz::Widget3D (cv_viz_Widget3D_updatePose_Affine3d)

--- Incoming ---
[   'cv.viz.Widget3D.getPose',
    'Affine3d',
    ['/C'],
    [],
    None,
    '@brief Returns the current pose of the widget.']
parse_name: cv.viz.Widget3D.getPose with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget3D::getPose namespace:cv::viz classpath:Widget3D classname:Widget3D name:getPose
Registering an unknown type: Affine3d
register (method) getPose in cv::viz::Widget3D (cv_viz_Widget3D_getPose_const)

--- Incoming ---
[   'cv.viz.Widget3D.applyTransform',
    'void',
    [],
    [['const Affine3d &', 'transform', '', []]],
    None,
    '@brief Transforms internal widget data (i.e. points, normals) using the '
    'given transform.\n'
    '\n'
    '@param transform Specified transformation to apply.']
parse_name: cv.viz.Widget3D.applyTransform with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget3D::applyTransform namespace:cv::viz classpath:Widget3D classname:Widget3D name:applyTransform
register (method) applyTransform in cv::viz::Widget3D (cv_viz_Widget3D_applyTransform_Affine3d)

--- Incoming ---
[   'cv.viz.Widget3D.setColor',
    'void',
    [],
    [['const Color &', 'color', '', []]],
    None,
    '@brief Sets the color of the widget.\n\n@param color color of type Color']
parse_name: cv.viz.Widget3D.setColor with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget3D::setColor namespace:cv::viz classpath:Widget3D classname:Widget3D name:setColor
register (method) setColor in cv::viz::Widget3D (cv_viz_Widget3D_setColor_Color)

--- Incoming ---
[   'class cv.viz.Widget2D',
    ': cv::viz::Widget',
    [],
    [],
    None,
    '@brief Base class of all 2D widgets.']
parse_name: class cv.viz.Widget2D with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget2D namespace:cv::viz classpath: classname: name:Widget2D
register class cv::viz::Widget2D (['class cv.viz.Widget2D', ': cv::viz::Widget', [], [], None, '@brief Base class of all 2D widgets.']) impl:cv::viz::Widget

--- Incoming ---
['cv.viz.Widget2D.Widget2D', 'W', [], [], None, '']
parse_name: cv.viz.Widget2D.Widget2D with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget2D::Widget2D namespace:cv::viz classpath:Widget2D classname:Widget2D name:Widget2D
register (constructor) default in cv::viz::Widget2D (cv_viz_Widget2D_Widget2D)

--- Incoming ---
[   'cv.viz.Widget2D.setColor',
    'void',
    [],
    [['const Color &', 'color', '', []]],
    None,
    '@brief Sets the color of the widget.\n\n@param color color of type Color']
parse_name: cv.viz.Widget2D.setColor with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget2D::setColor namespace:cv::viz classpath:Widget2D classname:Widget2D name:setColor
register (method) setColor in cv::viz::Widget2D (cv_viz_Widget2D_setColor_Color)

--- Incoming ---
[   'class cv.viz.WLine',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a finite line.']
parse_name: class cv.viz.WLine with ['cv', 'cv::viz'] -> fullname:cv::viz::WLine namespace:cv::viz classpath: classname: name:WLine
register class cv::viz::WLine (['class cv.viz.WLine', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a finite line.']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WLine.WLine',
    'W',
    [],
    [   ['const Point3d &', 'pt1', '', []],
        ['const Point3d &', 'pt2', '', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WLine.\n'
    '\n'
    '@param pt1 Start point of the line.\n'
    '@param pt2 End point of the line.\n'
    '@param color Color of the line.']
parse_name: cv.viz.WLine.WLine with ['cv', 'cv::viz'] -> fullname:cv::viz::WLine::WLine namespace:cv::viz classpath:WLine classname:WLine name:WLine
register (constructor) new in cv::viz::WLine (cv_viz_WLine_WLine_Point3d_Point3d_Color)

--- Incoming ---
[   'class cv.viz.WPlane',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a finite plane.']
parse_name: class cv.viz.WPlane with ['cv', 'cv::viz'] -> fullname:cv::viz::WPlane namespace:cv::viz classpath: classname: name:WPlane
register class cv::viz::WPlane (['class cv.viz.WPlane', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a finite plane.']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WPlane.WPlane',
    'W',
    [],
    [   ['const Size2d&', 'size', 'Size2d(1.0, 1.0)', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a default plane with center point at origin and normal '
    'oriented along z-axis.\n'
    '\n'
    '@param size Size of the plane\n'
    '@param color Color of the plane.']
parse_name: cv.viz.WPlane.WPlane with ['cv', 'cv::viz'] -> fullname:cv::viz::WPlane::WPlane namespace:cv::viz classpath:WPlane classname:WPlane name:WPlane
register (constructor) new in cv::viz::WPlane (cv_viz_WPlane_WPlane_Size2d_Color)

--- Incoming ---
[   'cv.viz.WPlane.WPlane',
    'W',
    [],
    [   ['const Point3d&', 'center', '', []],
        ['const Vec3d&', 'normal', '', []],
        ['const Vec3d&', 'new_yaxis', '', []],
        ['const Size2d&', 'size', 'Size2d(1.0, 1.0)', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a repositioned plane\n'
    '\n'
    '@param center Center of the plane\n'
    '@param normal Plane normal orientation\n'
    '@param new_yaxis Up-vector. New orientation of plane y-axis.\n'
    '@param size\n'
    '@param color Color of the plane.']
parse_name: cv.viz.WPlane.WPlane with ['cv', 'cv::viz'] -> fullname:cv::viz::WPlane::WPlane namespace:cv::viz classpath:WPlane classname:WPlane name:WPlane
register (constructor) new in cv::viz::WPlane (cv_viz_WPlane_WPlane_Point3d_Vec3d_Vec3d_Size2d_Color)

--- Incoming ---
[   'class cv.viz.WSphere',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a sphere. :']
parse_name: class cv.viz.WSphere with ['cv', 'cv::viz'] -> fullname:cv::viz::WSphere namespace:cv::viz classpath: classname: name:WSphere
register class cv::viz::WSphere (['class cv.viz.WSphere', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a sphere. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WSphere.WSphere',
    'W',
    [],
    [   ['const cv::Point3d &', 'center', '', []],
        ['double', 'radius', '', []],
        ['int', 'sphere_resolution', '10', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WSphere.\n'
    '\n'
    '@param center Center of the sphere.\n'
    '@param radius Radius of the sphere.\n'
    '@param sphere_resolution Resolution of the sphere.\n'
    '@param color Color of the sphere.']
parse_name: cv.viz.WSphere.WSphere with ['cv', 'cv::viz'] -> fullname:cv::viz::WSphere::WSphere namespace:cv::viz classpath:WSphere classname:WSphere name:WSphere
register (constructor) new in cv::viz::WSphere (cv_viz_WSphere_WSphere_Point3d_double_int_Color)

--- Incoming ---
[   'class cv.viz.WArrow',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines an arrow.']
parse_name: class cv.viz.WArrow with ['cv', 'cv::viz'] -> fullname:cv::viz::WArrow namespace:cv::viz classpath: classname: name:WArrow
register class cv::viz::WArrow (['class cv.viz.WArrow', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines an arrow.']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WArrow.WArrow',
    'W',
    [],
    [   ['const Point3d&', 'pt1', '', []],
        ['const Point3d&', 'pt2', '', []],
        ['double', 'thickness', '0.03', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs an WArrow.\n'
    '\n'
    '@param pt1 Start point of the arrow.\n'
    '@param pt2 End point of the arrow.\n'
    '@param thickness Thickness of the arrow. Thickness of arrow head is also '
    'adjusted\n'
    'accordingly.\n'
    '@param color Color of the arrow.\n'
    '\n'
    'Arrow head is located at the end point of the arrow.']
parse_name: cv.viz.WArrow.WArrow with ['cv', 'cv::viz'] -> fullname:cv::viz::WArrow::WArrow namespace:cv::viz classpath:WArrow classname:WArrow name:WArrow
register (constructor) new in cv::viz::WArrow (cv_viz_WArrow_WArrow_Point3d_Point3d_double_Color)

--- Incoming ---
[   'class cv.viz.WCircle',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a circle.']
parse_name: class cv.viz.WCircle with ['cv', 'cv::viz'] -> fullname:cv::viz::WCircle namespace:cv::viz classpath: classname: name:WCircle
register class cv::viz::WCircle (['class cv.viz.WCircle', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a circle.']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WCircle.WCircle',
    'W',
    [],
    [   ['double', 'radius', '', []],
        ['double', 'thickness', '0.01', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs default planar circle centered at origin with plane '
    'normal along z-axis\n'
    '\n'
    '@param radius Radius of the circle.\n'
    '@param thickness Thickness of the circle.\n'
    '@param color Color of the circle.']
parse_name: cv.viz.WCircle.WCircle with ['cv', 'cv::viz'] -> fullname:cv::viz::WCircle::WCircle namespace:cv::viz classpath:WCircle classname:WCircle name:WCircle
register (constructor) new in cv::viz::WCircle (cv_viz_WCircle_WCircle_double_double_Color)

--- Incoming ---
[   'cv.viz.WCircle.WCircle',
    'W',
    [],
    [   ['double', 'radius', '', []],
        ['const Point3d&', 'center', '', []],
        ['const Vec3d&', 'normal', '', []],
        ['double', 'thickness', '0.01', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs repositioned planar circle.\n'
    '\n'
    '@param radius Radius of the circle.\n'
    '@param center Center of the circle.\n'
    '@param normal Normal of the plane in which the circle lies.\n'
    '@param thickness Thickness of the circle.\n'
    '@param color Color of the circle.']
parse_name: cv.viz.WCircle.WCircle with ['cv', 'cv::viz'] -> fullname:cv::viz::WCircle::WCircle namespace:cv::viz classpath:WCircle classname:WCircle name:WCircle
register (constructor) new in cv::viz::WCircle (cv_viz_WCircle_WCircle_double_Point3d_Vec3d_double_Color)

--- Incoming ---
[   'class cv.viz.WCone',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a cone. :']
parse_name: class cv.viz.WCone with ['cv', 'cv::viz'] -> fullname:cv::viz::WCone namespace:cv::viz classpath: classname: name:WCone
register class cv::viz::WCone (['class cv.viz.WCone', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a cone. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WCone.WCone',
    'W',
    [],
    [   ['double', 'length', '', []],
        ['double', 'radius', '', []],
        ['int', 'resolution', '6.0', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs default cone oriented along x-axis with center of its '
    'base located at origin\n'
    '\n'
    '@param length Length of the cone.\n'
    '@param radius Radius of the cone.\n'
    '@param resolution Resolution of the cone.\n'
    '@param color Color of the cone.']
parse_name: cv.viz.WCone.WCone with ['cv', 'cv::viz'] -> fullname:cv::viz::WCone::WCone namespace:cv::viz classpath:WCone classname:WCone name:WCone
register (constructor) new in cv::viz::WCone (cv_viz_WCone_WCone_double_double_int_Color)

--- Incoming ---
[   'cv.viz.WCone.WCone',
    'W',
    [],
    [   ['double', 'radius', '', []],
        ['const Point3d&', 'center', '', []],
        ['const Point3d&', 'tip', '', []],
        ['int', 'resolution', '6.0', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs repositioned planar cone.\n'
    '\n'
    '@param radius Radius of the cone.\n'
    '@param center Center of the cone base.\n'
    '@param tip Tip of the cone.\n'
    '@param resolution Resolution of the cone.\n'
    '@param color Color of the cone.']
parse_name: cv.viz.WCone.WCone with ['cv', 'cv::viz'] -> fullname:cv::viz::WCone::WCone namespace:cv::viz classpath:WCone classname:WCone name:WCone
register (constructor) new in cv::viz::WCone (cv_viz_WCone_WCone_double_Point3d_Point3d_int_Color)

--- Incoming ---
[   'class cv.viz.WCylinder',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a cylinder. :']
parse_name: class cv.viz.WCylinder with ['cv', 'cv::viz'] -> fullname:cv::viz::WCylinder namespace:cv::viz classpath: classname: name:WCylinder
register class cv::viz::WCylinder (['class cv.viz.WCylinder', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a cylinder. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WCylinder.WCylinder',
    'W',
    [],
    [   ['const Point3d&', 'axis_point1', '', []],
        ['const Point3d&', 'axis_point2', '', []],
        ['double', 'radius', '', []],
        ['int', 'numsides', '30', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WCylinder.\n'
    '\n'
    '@param axis_point1 A point1 on the axis of the cylinder.\n'
    '@param axis_point2 A point2 on the axis of the cylinder.\n'
    '@param radius Radius of the cylinder.\n'
    '@param numsides Resolution of the cylinder.\n'
    '@param color Color of the cylinder.']
parse_name: cv.viz.WCylinder.WCylinder with ['cv', 'cv::viz'] -> fullname:cv::viz::WCylinder::WCylinder namespace:cv::viz classpath:WCylinder classname:WCylinder name:WCylinder
register (constructor) new in cv::viz::WCylinder (cv_viz_WCylinder_WCylinder_Point3d_Point3d_double_int_Color)

--- Incoming ---
[   'class cv.viz.WCube',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a cube.']
parse_name: class cv.viz.WCube with ['cv', 'cv::viz'] -> fullname:cv::viz::WCube namespace:cv::viz classpath: classname: name:WCube
register class cv::viz::WCube (['class cv.viz.WCube', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a cube.']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WCube.WCube',
    'W',
    [],
    [   ['const Point3d&', 'min_point', 'Vec3d::all(-0.5)', []],
        ['const Point3d&', 'max_point', 'Vec3d::all(0.5)', []],
        ['bool', 'wire_frame', 'true', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WCube.\n'
    '\n'
    '@param min_point Specifies minimum point of the bounding box.\n'
    '@param max_point Specifies maximum point of the bounding box.\n'
    '@param wire_frame If true, cube is represented as wireframe.\n'
    '@param color Color of the cube.\n'
    '\n'
    '![Cube Widget](images/cube_widget.png)']
parse_name: cv.viz.WCube.WCube with ['cv', 'cv::viz'] -> fullname:cv::viz::WCube::WCube namespace:cv::viz classpath:WCube classname:WCube name:WCube
register (constructor) new in cv::viz::WCube (cv_viz_WCube_WCube_Point3d_Point3d_bool_Color)

--- Incoming ---
[   'class cv.viz.WPolyLine',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a poly line. :']
parse_name: class cv.viz.WPolyLine with ['cv', 'cv::viz'] -> fullname:cv::viz::WPolyLine namespace:cv::viz classpath: classname: name:WPolyLine
register class cv::viz::WPolyLine (['class cv.viz.WPolyLine', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a poly line. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WPolyLine.WPolyLine',
    'W',
    [],
    [['InputArray', 'points', '', []], ['InputArray', 'colors', '', []]],
    None,
    '']
parse_name: cv.viz.WPolyLine.WPolyLine with ['cv', 'cv::viz'] -> fullname:cv::viz::WPolyLine::WPolyLine namespace:cv::viz classpath:WPolyLine classname:WPolyLine name:WPolyLine
register (constructor) new in cv::viz::WPolyLine (cv_viz_WPolyLine_WPolyLine__InputArray__InputArray)

--- Incoming ---
[   'cv.viz.WPolyLine.WPolyLine',
    'W',
    [],
    [   ['InputArray', 'points', '', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WPolyLine.\n'
    '\n'
    '@param points Point set.\n'
    '@param color Color of the poly line.']
parse_name: cv.viz.WPolyLine.WPolyLine with ['cv', 'cv::viz'] -> fullname:cv::viz::WPolyLine::WPolyLine namespace:cv::viz classpath:WPolyLine classname:WPolyLine name:WPolyLine
register (constructor) new in cv::viz::WPolyLine (cv_viz_WPolyLine_WPolyLine__InputArray_Color)

--- Incoming ---
[   'class cv.viz.WText',
    ': cv::viz::Widget2D',
    [],
    [],
    None,
    '@brief This 2D Widget represents text overlay.']
parse_name: class cv.viz.WText with ['cv', 'cv::viz'] -> fullname:cv::viz::WText namespace:cv::viz classpath: classname: name:WText
register class cv::viz::WText (['class cv.viz.WText', ': cv::viz::Widget2D', [], [], None, '@brief This 2D Widget represents text overlay.']) impl:cv::viz::Widget2D

--- Incoming ---
[   'cv.viz.WText.WText',
    'W',
    [],
    [   ['const String &', 'text', '', []],
        ['const Point &', 'pos', '', []],
        ['int', 'font_size', '20', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WText.\n'
    '\n'
    '@param text Text content of the widget.\n'
    '@param pos Position of the text.\n'
    '@param font_size Font size.\n'
    '@param color Color of the text.']
parse_name: cv.viz.WText.WText with ['cv', 'cv::viz'] -> fullname:cv::viz::WText::WText namespace:cv::viz classpath:WText classname:WText name:WText
register (constructor) new in cv::viz::WText (cv_viz_WText_WText_String_Point_int_Color)

--- Incoming ---
[   'cv.viz.WText.setText',
    'void',
    [],
    [['const String &', 'text', '', []]],
    None,
    '@brief Sets the text content of the widget.\n'
    '\n'
    '@param text Text content of the widget.']
parse_name: cv.viz.WText.setText with ['cv', 'cv::viz'] -> fullname:cv::viz::WText::setText namespace:cv::viz classpath:WText classname:WText name:setText
register (method) setText in cv::viz::WText (cv_viz_WText_setText_String)

--- Incoming ---
[   'cv.viz.WText.getText',
    'String',
    ['/C'],
    [],
    None,
    '@brief Returns the current text content of the widget.']
parse_name: cv.viz.WText.getText with ['cv', 'cv::viz'] -> fullname:cv::viz::WText::getText namespace:cv::viz classpath:WText classname:WText name:getText
register (method) getText in cv::viz::WText (cv_viz_WText_getText_const)

--- Incoming ---
[   'class cv.viz.WText3D',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget represents 3D text. The text always faces the '
    'camera.']
parse_name: class cv.viz.WText3D with ['cv', 'cv::viz'] -> fullname:cv::viz::WText3D namespace:cv::viz classpath: classname: name:WText3D
register class cv::viz::WText3D (['class cv.viz.WText3D', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget represents 3D text. The text always faces the camera.']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WText3D.WText3D',
    'W',
    [],
    [   ['const String &', 'text', '', []],
        ['const Point3d &', 'position', '', []],
        ['double', 'text_scale', '1.', []],
        ['bool', 'face_camera', 'true', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WText3D.\n'
    '\n'
    '@param text Text content of the widget.\n'
    '@param position Position of the text.\n'
    '@param text_scale Size of the text.\n'
    '@param face_camera If true, text always faces the camera.\n'
    '@param color Color of the text.']
parse_name: cv.viz.WText3D.WText3D with ['cv', 'cv::viz'] -> fullname:cv::viz::WText3D::WText3D namespace:cv::viz classpath:WText3D classname:WText3D name:WText3D
register (constructor) new in cv::viz::WText3D (cv_viz_WText3D_WText3D_String_Point3d_double_bool_Color)

--- Incoming ---
[   'cv.viz.WText3D.setText',
    'void',
    [],
    [['const String &', 'text', '', []]],
    None,
    '@brief Sets the text content of the widget.\n'
    '\n'
    '@param text Text content of the widget.']
parse_name: cv.viz.WText3D.setText with ['cv', 'cv::viz'] -> fullname:cv::viz::WText3D::setText namespace:cv::viz classpath:WText3D classname:WText3D name:setText
register (method) setText in cv::viz::WText3D (cv_viz_WText3D_setText_String)

--- Incoming ---
[   'cv.viz.WText3D.getText',
    'String',
    ['/C'],
    [],
    None,
    '@brief Returns the current text content of the widget.']
parse_name: cv.viz.WText3D.getText with ['cv', 'cv::viz'] -> fullname:cv::viz::WText3D::getText namespace:cv::viz classpath:WText3D classname:WText3D name:getText
register (method) getText in cv::viz::WText3D (cv_viz_WText3D_getText_const)

--- Incoming ---
[   'class cv.viz.WImageOverlay',
    ': cv::viz::Widget2D',
    [],
    [],
    None,
    '@brief This 2D Widget represents an image overlay. :']
parse_name: class cv.viz.WImageOverlay with ['cv', 'cv::viz'] -> fullname:cv::viz::WImageOverlay namespace:cv::viz classpath: classname: name:WImageOverlay
register class cv::viz::WImageOverlay (['class cv.viz.WImageOverlay', ': cv::viz::Widget2D', [], [], None, '@brief This 2D Widget represents an image overlay. :']) impl:cv::viz::Widget2D

--- Incoming ---
[   'cv.viz.WImageOverlay.WImageOverlay',
    'W',
    [],
    [['InputArray', 'image', '', []], ['const Rect &', 'rect', '', []]],
    None,
    '@brief Constructs an WImageOverlay.\n'
    '\n'
    '@param image BGR or Gray-Scale image.\n'
    '@param rect Image is scaled and positioned based on rect.']
parse_name: cv.viz.WImageOverlay.WImageOverlay with ['cv', 'cv::viz'] -> fullname:cv::viz::WImageOverlay::WImageOverlay namespace:cv::viz classpath:WImageOverlay classname:WImageOverlay name:WImageOverlay
register (constructor) new in cv::viz::WImageOverlay (cv_viz_WImageOverlay_WImageOverlay__InputArray_Rect)

--- Incoming ---
[   'cv.viz.WImageOverlay.setImage',
    'void',
    [],
    [['InputArray', 'image', '', []]],
    None,
    '@brief Sets the image content of the widget.\n'
    '\n'
    '@param image BGR or Gray-Scale image.']
parse_name: cv.viz.WImageOverlay.setImage with ['cv', 'cv::viz'] -> fullname:cv::viz::WImageOverlay::setImage namespace:cv::viz classpath:WImageOverlay classname:WImageOverlay name:setImage
register (method) setImage in cv::viz::WImageOverlay (cv_viz_WImageOverlay_setImage__InputArray)

--- Incoming ---
[   'class cv.viz.WImage3D',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget represents an image in 3D space. :']
parse_name: class cv.viz.WImage3D with ['cv', 'cv::viz'] -> fullname:cv::viz::WImage3D namespace:cv::viz classpath: classname: name:WImage3D
register class cv::viz::WImage3D (['class cv.viz.WImage3D', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget represents an image in 3D space. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WImage3D.WImage3D',
    'W',
    [],
    [['InputArray', 'image', '', []], ['const Size2d &', 'size', '', []]],
    None,
    '@brief Constructs an WImage3D.\n'
    '\n'
    '@param image BGR or Gray-Scale image.\n'
    '@param size Size of the image.']
parse_name: cv.viz.WImage3D.WImage3D with ['cv', 'cv::viz'] -> fullname:cv::viz::WImage3D::WImage3D namespace:cv::viz classpath:WImage3D classname:WImage3D name:WImage3D
register (constructor) new in cv::viz::WImage3D (cv_viz_WImage3D_WImage3D__InputArray_Size2d)

--- Incoming ---
[   'cv.viz.WImage3D.WImage3D',
    'W',
    [],
    [   ['InputArray', 'image', '', []],
        ['const Size2d &', 'size', '', []],
        ['const Vec3d &', 'center', '', []],
        ['const Vec3d &', 'normal', '', []],
        ['const Vec3d &', 'up_vector', '', []]],
    None,
    '@brief Constructs an WImage3D.\n'
    '\n'
    '@param image BGR or Gray-Scale image.\n'
    '@param size Size of the image.\n'
    '@param center Position of the image.\n'
    '@param normal Normal of the plane that represents the image.\n'
    '@param up_vector Determines orientation of the image.']
parse_name: cv.viz.WImage3D.WImage3D with ['cv', 'cv::viz'] -> fullname:cv::viz::WImage3D::WImage3D namespace:cv::viz classpath:WImage3D classname:WImage3D name:WImage3D
register (constructor) new in cv::viz::WImage3D (cv_viz_WImage3D_WImage3D__InputArray_Size2d_Vec3d_Vec3d_Vec3d)

--- Incoming ---
[   'cv.viz.WImage3D.setImage',
    'void',
    [],
    [['InputArray', 'image', '', []]],
    None,
    '@brief Sets the image content of the widget.\n'
    '\n'
    '@param image BGR or Gray-Scale image.']
parse_name: cv.viz.WImage3D.setImage with ['cv', 'cv::viz'] -> fullname:cv::viz::WImage3D::setImage namespace:cv::viz classpath:WImage3D classname:WImage3D name:setImage
register (method) setImage in cv::viz::WImage3D (cv_viz_WImage3D_setImage__InputArray)

--- Incoming ---
[   'cv.viz.WImage3D.setSize',
    'void',
    [],
    [['const Size&', 'size', '', []]],
    None,
    '@brief Sets the image size of the widget.\n'
    '\n'
    '@param size the new size of the image.']
parse_name: cv.viz.WImage3D.setSize with ['cv', 'cv::viz'] -> fullname:cv::viz::WImage3D::setSize namespace:cv::viz classpath:WImage3D classname:WImage3D name:setSize
register (method) setSize in cv::viz::WImage3D (cv_viz_WImage3D_setSize_Size)

--- Incoming ---
[   'class cv.viz.WCoordinateSystem',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget represents a coordinate system. :']
parse_name: class cv.viz.WCoordinateSystem with ['cv', 'cv::viz'] -> fullname:cv::viz::WCoordinateSystem namespace:cv::viz classpath: classname: name:WCoordinateSystem
register class cv::viz::WCoordinateSystem (['class cv.viz.WCoordinateSystem', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget represents a coordinate system. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WCoordinateSystem.WCoordinateSystem',
    'W',
    [],
    [['double', 'scale', '1.0', []]],
    None,
    '@brief Constructs a WCoordinateSystem.\n'
    '\n'
    '@param scale Determines the size of the axes.']
parse_name: cv.viz.WCoordinateSystem.WCoordinateSystem with ['cv', 'cv::viz'] -> fullname:cv::viz::WCoordinateSystem::WCoordinateSystem namespace:cv::viz classpath:WCoordinateSystem classname:WCoordinateSystem name:WCoordinateSystem
register (constructor) new in cv::viz::WCoordinateSystem (cv_viz_WCoordinateSystem_WCoordinateSystem_double)

--- Incoming ---
[   'class cv.viz.WGrid',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a grid. :']
parse_name: class cv.viz.WGrid with ['cv', 'cv::viz'] -> fullname:cv::viz::WGrid namespace:cv::viz classpath: classname: name:WGrid
register class cv::viz::WGrid (['class cv.viz.WGrid', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a grid. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WGrid.WGrid',
    'W',
    [],
    [   ['const Vec2i &', 'cells', 'Vec2i::all(10)', []],
        ['const Vec2d &', 'cells_spacing', 'Vec2d::all(1.0)', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WGrid.\n'
    '\n'
    '@param cells Number of cell columns and rows, respectively.\n'
    '@param cells_spacing Size of each cell, respectively.\n'
    '@param color Color of the grid.']
parse_name: cv.viz.WGrid.WGrid with ['cv', 'cv::viz'] -> fullname:cv::viz::WGrid::WGrid namespace:cv::viz classpath:WGrid classname:WGrid name:WGrid
register (constructor) new in cv::viz::WGrid (cv_viz_WGrid_WGrid_Vec2i_Vec2d_Color)

--- Incoming ---
[   'cv.viz.WGrid.WGrid',
    'W',
    [],
    [   ['const Point3d&', 'center', '', []],
        ['const Vec3d&', 'normal', '', []],
        ['const Vec3d&', 'new_yaxis', '', []],
        ['const Vec2i &', 'cells', 'Vec2i::all(10)', []],
        ['const Vec2d &', 'cells_spacing', 'Vec2d::all(1.0)', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    'Creates repositioned grid']
parse_name: cv.viz.WGrid.WGrid with ['cv', 'cv::viz'] -> fullname:cv::viz::WGrid::WGrid namespace:cv::viz classpath:WGrid classname:WGrid name:WGrid
register (constructor) new in cv::viz::WGrid (cv_viz_WGrid_WGrid_Point3d_Vec3d_Vec3d_Vec2i_Vec2d_Color)

--- Incoming ---
[   'class cv.viz.WCameraPosition',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget represents camera position in a scene by its axes '
    'or viewing frustum. :']
parse_name: class cv.viz.WCameraPosition with ['cv', 'cv::viz'] -> fullname:cv::viz::WCameraPosition namespace:cv::viz classpath: classname: name:WCameraPosition
register class cv::viz::WCameraPosition (['class cv.viz.WCameraPosition', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget represents camera position in a scene by its axes or viewing frustum. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WCameraPosition.WCameraPosition',
    'W',
    [],
    [['double', 'scale', '1.0', []]],
    None,
    '@brief Creates camera coordinate frame at the origin.\n'
    '\n'
    '![Camera coordinate frame](images/cpw1.png)']
parse_name: cv.viz.WCameraPosition.WCameraPosition with ['cv', 'cv::viz'] -> fullname:cv::viz::WCameraPosition::WCameraPosition namespace:cv::viz classpath:WCameraPosition classname:WCameraPosition name:WCameraPosition
register (constructor) new in cv::viz::WCameraPosition (cv_viz_WCameraPosition_WCameraPosition_double)

--- Incoming ---
[   'cv.viz.WCameraPosition.WCameraPosition',
    'W',
    [],
    [   ['const Matx33d &', 'K', '', []],
        ['double', 'scale', '1.0', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Display the viewing frustum\n'
    '@param K Intrinsic matrix of the camera.\n'
    '@param scale Scale of the frustum.\n'
    '@param color Color of the frustum.\n'
    '\n'
    'Creates viewing frustum of the camera based on its intrinsic matrix K.\n'
    '\n'
    '![Camera viewing frustum](images/cpw2.png)']
parse_name: cv.viz.WCameraPosition.WCameraPosition with ['cv', 'cv::viz'] -> fullname:cv::viz::WCameraPosition::WCameraPosition namespace:cv::viz classpath:WCameraPosition classname:WCameraPosition name:WCameraPosition
register (constructor) new in cv::viz::WCameraPosition (cv_viz_WCameraPosition_WCameraPosition_Matx33d_double_Color)

--- Incoming ---
[   'cv.viz.WCameraPosition.WCameraPosition',
    'W',
    [],
    [   ['const Vec2d &', 'fov', '', []],
        ['double', 'scale', '1.0', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Display the viewing frustum\n'
    '@param fov Field of view of the camera (horizontal, vertical).\n'
    '@param scale Scale of the frustum.\n'
    '@param color Color of the frustum.\n'
    '\n'
    'Creates viewing frustum of the camera based on its field of view fov.\n'
    '\n'
    '![Camera viewing frustum](images/cpw2.png)']
parse_name: cv.viz.WCameraPosition.WCameraPosition with ['cv', 'cv::viz'] -> fullname:cv::viz::WCameraPosition::WCameraPosition namespace:cv::viz classpath:WCameraPosition classname:WCameraPosition name:WCameraPosition
register (constructor) new in cv::viz::WCameraPosition (cv_viz_WCameraPosition_WCameraPosition_Vec2d_double_Color)

--- Incoming ---
[   'cv.viz.WCameraPosition.WCameraPosition',
    'W',
    [],
    [   ['const Matx33d &', 'K', '', []],
        ['InputArray', 'image', '', []],
        ['double', 'scale', '1.0', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Display image on the far plane of the viewing frustum\n'
    '\n'
    '@param K Intrinsic matrix of the camera.\n'
    '@param image BGR or Gray-Scale image that is going to be displayed on the '
    'far plane of the frustum.\n'
    '@param scale Scale of the frustum and image.\n'
    '@param color Color of the frustum.\n'
    '\n'
    'Creates viewing frustum of the camera based on its intrinsic matrix K, '
    'and displays image on\n'
    'the far end plane.\n'
    '\n'
    '![Camera viewing frustum with image](images/cpw3.png)']
parse_name: cv.viz.WCameraPosition.WCameraPosition with ['cv', 'cv::viz'] -> fullname:cv::viz::WCameraPosition::WCameraPosition namespace:cv::viz classpath:WCameraPosition classname:WCameraPosition name:WCameraPosition
register (constructor) new in cv::viz::WCameraPosition (cv_viz_WCameraPosition_WCameraPosition_Matx33d__InputArray_double_Color)

--- Incoming ---
[   'cv.viz.WCameraPosition.WCameraPosition',
    'W',
    [],
    [   ['const Vec2d &', 'fov', '', []],
        ['InputArray', 'image', '', []],
        ['double', 'scale', '1.0', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief  Display image on the far plane of the viewing frustum\n'
    '\n'
    '@param fov Field of view of the camera (horizontal, vertical).\n'
    '@param image BGR or Gray-Scale image that is going to be displayed on the '
    'far plane of the frustum.\n'
    '@param scale Scale of the frustum and image.\n'
    '@param color Color of the frustum.\n'
    '\n'
    'Creates viewing frustum of the camera based on its intrinsic matrix K, '
    'and displays image on\n'
    'the far end plane.\n'
    '\n'
    '![Camera viewing frustum with image](images/cpw3.png)']
parse_name: cv.viz.WCameraPosition.WCameraPosition with ['cv', 'cv::viz'] -> fullname:cv::viz::WCameraPosition::WCameraPosition namespace:cv::viz classpath:WCameraPosition classname:WCameraPosition name:WCameraPosition
register (constructor) new in cv::viz::WCameraPosition (cv_viz_WCameraPosition_WCameraPosition_Vec2d__InputArray_double_Color)

--- Incoming ---
[   'class cv.viz.WTrajectory',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget represents a trajectory. :']
parse_name: class cv.viz.WTrajectory with ['cv', 'cv::viz'] -> fullname:cv::viz::WTrajectory namespace:cv::viz classpath: classname: name:WTrajectory
register class cv::viz::WTrajectory (['class cv.viz.WTrajectory', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget represents a trajectory. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'enum cv.viz.WTrajectory.<unnamed>',
    '',
    [],
    [   ['const cv.viz.WTrajectory.FRAMES', '1', [], [], None, ''],
        ['const cv.viz.WTrajectory.PATH', '2', [], [], None, ''],
        ['const cv.viz.WTrajectory.BOTH', 'FRAMES + PATH', [], [], None, '']],
    None,
    '']
parse_name: const cv.viz.WTrajectory.FRAMES with ['cv', 'cv::viz'] -> fullname:cv::viz::WTrajectory::FRAMES namespace:cv::viz classpath:WTrajectory classname:WTrajectory name:FRAMES
parse_name: const cv.viz.WTrajectory.PATH with ['cv', 'cv::viz'] -> fullname:cv::viz::WTrajectory::PATH namespace:cv::viz classpath:WTrajectory classname:WTrajectory name:PATH
parse_name: const cv.viz.WTrajectory.BOTH with ['cv', 'cv::viz'] -> fullname:cv::viz::WTrajectory::BOTH namespace:cv::viz classpath:WTrajectory classname:WTrajectory name:BOTH

--- Incoming ---
[   'cv.viz.WTrajectory.WTrajectory',
    'W',
    [],
    [   ['InputArray', 'path', '', []],
        ['int', 'display_mode', 'WTrajectory::PATH', []],
        ['double', 'scale', '1.0', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WTrajectory.\n'
    '\n'
    '@param path List of poses on a trajectory. Takes '
    'std::vector\\<Affine\\<T\\>\\> with T == [float | double]\n'
    '@param display_mode Display mode. This can be PATH, FRAMES, and BOTH.\n'
    '@param scale Scale of the frames. Polyline is not affected.\n'
    '@param color Color of the polyline that represents path.\n'
    '\n'
    'Frames are not affected.\n'
    'Displays trajectory of the given path as follows:\n'
    '-   PATH : Displays a poly line that represents the path.\n'
    '-   FRAMES : Displays coordinate frames at each pose.\n'
    '-   PATH & FRAMES : Displays both poly line and coordinate frames.']
parse_name: cv.viz.WTrajectory.WTrajectory with ['cv', 'cv::viz'] -> fullname:cv::viz::WTrajectory::WTrajectory namespace:cv::viz classpath:WTrajectory classname:WTrajectory name:WTrajectory
register (constructor) new in cv::viz::WTrajectory (cv_viz_WTrajectory_WTrajectory__InputArray_int_double_Color)

--- Incoming ---
[   'class cv.viz.WTrajectoryFrustums',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget represents a trajectory. :']
parse_name: class cv.viz.WTrajectoryFrustums with ['cv', 'cv::viz'] -> fullname:cv::viz::WTrajectoryFrustums namespace:cv::viz classpath: classname: name:WTrajectoryFrustums
register class cv::viz::WTrajectoryFrustums (['class cv.viz.WTrajectoryFrustums', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget represents a trajectory. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WTrajectoryFrustums.WTrajectoryFrustums',
    'W',
    [],
    [   ['InputArray', 'path', '', []],
        ['const Matx33d &', 'K', '', []],
        ['double', 'scale', '1.', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WTrajectoryFrustums.\n'
    '\n'
    '@param path List of poses on a trajectory. Takes '
    'std::vector\\<Affine\\<T\\>\\> with T == [float | double]\n'
    '@param K Intrinsic matrix of the camera.\n'
    '@param scale Scale of the frustums.\n'
    '@param color Color of the frustums.\n'
    '\n'
    'Displays frustums at each pose of the trajectory.']
parse_name: cv.viz.WTrajectoryFrustums.WTrajectoryFrustums with ['cv', 'cv::viz'] -> fullname:cv::viz::WTrajectoryFrustums::WTrajectoryFrustums namespace:cv::viz classpath:WTrajectoryFrustums classname:WTrajectoryFrustums name:WTrajectoryFrustums
register (constructor) new in cv::viz::WTrajectoryFrustums (cv_viz_WTrajectoryFrustums_WTrajectoryFrustums__InputArray_Matx33d_double_Color)

--- Incoming ---
[   'cv.viz.WTrajectoryFrustums.WTrajectoryFrustums',
    'W',
    [],
    [   ['InputArray', 'path', '', []],
        ['const Vec2d &', 'fov', '', []],
        ['double', 'scale', '1.', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WTrajectoryFrustums.\n'
    '\n'
    '@param path List of poses on a trajectory. Takes '
    'std::vector\\<Affine\\<T\\>\\> with T == [float | double]\n'
    '@param fov Field of view of the camera (horizontal, vertical).\n'
    '@param scale Scale of the frustums.\n'
    '@param color Color of the frustums.\n'
    '\n'
    'Displays frustums at each pose of the trajectory.']
parse_name: cv.viz.WTrajectoryFrustums.WTrajectoryFrustums with ['cv', 'cv::viz'] -> fullname:cv::viz::WTrajectoryFrustums::WTrajectoryFrustums namespace:cv::viz classpath:WTrajectoryFrustums classname:WTrajectoryFrustums name:WTrajectoryFrustums
register (constructor) new in cv::viz::WTrajectoryFrustums (cv_viz_WTrajectoryFrustums_WTrajectoryFrustums__InputArray_Vec2d_double_Color)

--- Incoming ---
[   'class cv.viz.WTrajectorySpheres',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget represents a trajectory using spheres and lines\n'
    '\n'
    'where spheres represent the positions of the camera, and lines represent '
    'the direction from\n'
    'previous position to the current. :']
parse_name: class cv.viz.WTrajectorySpheres with ['cv', 'cv::viz'] -> fullname:cv::viz::WTrajectorySpheres namespace:cv::viz classpath: classname: name:WTrajectorySpheres
register class cv::viz::WTrajectorySpheres (['class cv.viz.WTrajectorySpheres', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget represents a trajectory using spheres and lines\n\nwhere spheres represent the positions of the camera, and lines represent the direction from\nprevious position to the current. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WTrajectorySpheres.WTrajectorySpheres',
    'W',
    [],
    [   ['InputArray', 'path', '', []],
        ['double', 'line_length', '0.05', []],
        ['double', 'radius', '0.007', []],
        ['const Color &', 'from', 'Color::red()', []],
        ['const Color &', 'to', 'Color::white()', []]],
    None,
    '@brief Constructs a WTrajectorySpheres.\n'
    '\n'
    '@param path List of poses on a trajectory. Takes '
    'std::vector\\<Affine\\<T\\>\\> with T == [float | double]\n'
    '@param line_length Max length of the lines which point to previous '
    'position\n'
    '@param radius Radius of the spheres.\n'
    '@param from Color for first sphere.\n'
    '@param to Color for last sphere. Intermediate spheres will have '
    'interpolated color.']
parse_name: cv.viz.WTrajectorySpheres.WTrajectorySpheres with ['cv', 'cv::viz'] -> fullname:cv::viz::WTrajectorySpheres::WTrajectorySpheres namespace:cv::viz classpath:WTrajectorySpheres classname:WTrajectorySpheres name:WTrajectorySpheres
register (constructor) new in cv::viz::WTrajectorySpheres (cv_viz_WTrajectorySpheres_WTrajectorySpheres__InputArray_double_double_Color_Color)

--- Incoming ---
[   'class cv.viz.WCloud',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a point cloud. :\n'
    '\n'
    '@note In case there are four channels in the cloud, fourth channel is '
    'ignored.']
parse_name: class cv.viz.WCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloud namespace:cv::viz classpath: classname: name:WCloud
register class cv::viz::WCloud (['class cv.viz.WCloud', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a point cloud. :\n\n@note In case there are four channels in the cloud, fourth channel is ignored.']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WCloud.WCloud',
    'W',
    [],
    [['InputArray', 'cloud', '', []], ['InputArray', 'colors', '', []]],
    None,
    '@brief Constructs a WCloud.\n'
    '\n'
    '@param cloud Set of points which can be of type: CV_32FC3, CV_32FC4, '
    'CV_64FC3, CV_64FC4.\n'
    '@param colors Set of colors. It has to be of the same size with cloud.\n'
    '\n'
    'Points in the cloud belong to mask when they are set to (NaN, NaN, NaN).']
parse_name: cv.viz.WCloud.WCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloud::WCloud namespace:cv::viz classpath:WCloud classname:WCloud name:WCloud
register (constructor) new in cv::viz::WCloud (cv_viz_WCloud_WCloud__InputArray__InputArray)

--- Incoming ---
[   'cv.viz.WCloud.WCloud',
    'W',
    [],
    [   ['InputArray', 'cloud', '', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WCloud.\n'
    '@param cloud Set of points which can be of type: CV_32FC3, CV_32FC4, '
    'CV_64FC3, CV_64FC4.\n'
    '@param color A single Color for the whole cloud.\n'
    '\n'
    'Points in the cloud belong to mask when they are set to (NaN, NaN, NaN).']
parse_name: cv.viz.WCloud.WCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloud::WCloud namespace:cv::viz classpath:WCloud classname:WCloud name:WCloud
register (constructor) new in cv::viz::WCloud (cv_viz_WCloud_WCloud__InputArray_Color)

--- Incoming ---
[   'cv.viz.WCloud.WCloud',
    'W',
    [],
    [   ['InputArray', 'cloud', '', []],
        ['InputArray', 'colors', '', []],
        ['InputArray', 'normals', '', []]],
    None,
    '@brief Constructs a WCloud.\n'
    '@param cloud Set of points which can be of type: CV_32FC3, CV_32FC4, '
    'CV_64FC3, CV_64FC4.\n'
    '@param colors Set of colors. It has to be of the same size with cloud.\n'
    '@param normals Normals for each point in cloud. Size and type should '
    'match with the cloud parameter.\n'
    '\n'
    'Points in the cloud belong to mask when they are set to (NaN, NaN, NaN).']
parse_name: cv.viz.WCloud.WCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloud::WCloud namespace:cv::viz classpath:WCloud classname:WCloud name:WCloud
register (constructor) new in cv::viz::WCloud (cv_viz_WCloud_WCloud__InputArray__InputArray__InputArray)

--- Incoming ---
[   'cv.viz.WCloud.WCloud',
    'W',
    [],
    [   ['InputArray', 'cloud', '', []],
        ['const Color &', 'color', '', []],
        ['InputArray', 'normals', '', []]],
    None,
    '@brief Constructs a WCloud.\n'
    '@param cloud Set of points which can be of type: CV_32FC3, CV_32FC4, '
    'CV_64FC3, CV_64FC4.\n'
    '@param color A single Color for the whole cloud.\n'
    '@param normals Normals for each point in cloud.\n'
    '\n'
    'Size and type should match with the cloud parameter.\n'
    'Points in the cloud belong to mask when they are set to (NaN, NaN, NaN).']
parse_name: cv.viz.WCloud.WCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloud::WCloud namespace:cv::viz classpath:WCloud classname:WCloud name:WCloud
register (constructor) new in cv::viz::WCloud (cv_viz_WCloud_WCloud__InputArray_Color__InputArray)

--- Incoming ---
['class cv.viz.WPaintedCloud', ': cv::viz::Widget3D', [], [], None, '']
parse_name: class cv.viz.WPaintedCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WPaintedCloud namespace:cv::viz classpath: classname: name:WPaintedCloud
register class cv::viz::WPaintedCloud (['class cv.viz.WPaintedCloud', ': cv::viz::Widget3D', [], [], None, '']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WPaintedCloud.WPaintedCloud',
    'W',
    [],
    [['InputArray', 'cloud', '', []]],
    None,
    'Paint cloud with default gradient between cloud bounds points']
parse_name: cv.viz.WPaintedCloud.WPaintedCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WPaintedCloud::WPaintedCloud namespace:cv::viz classpath:WPaintedCloud classname:WPaintedCloud name:WPaintedCloud
register (constructor) new in cv::viz::WPaintedCloud (cv_viz_WPaintedCloud_WPaintedCloud__InputArray)

--- Incoming ---
[   'cv.viz.WPaintedCloud.WPaintedCloud',
    'W',
    [],
    [   ['InputArray', 'cloud', '', []],
        ['const Point3d&', 'p1', '', []],
        ['const Point3d&', 'p2', '', []]],
    None,
    'Paint cloud with default gradient between given points']
parse_name: cv.viz.WPaintedCloud.WPaintedCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WPaintedCloud::WPaintedCloud namespace:cv::viz classpath:WPaintedCloud classname:WPaintedCloud name:WPaintedCloud
register (constructor) new in cv::viz::WPaintedCloud (cv_viz_WPaintedCloud_WPaintedCloud__InputArray_Point3d_Point3d)

--- Incoming ---
[   'cv.viz.WPaintedCloud.WPaintedCloud',
    'W',
    [],
    [   ['InputArray', 'cloud', '', []],
        ['const Point3d&', 'p1', '', []],
        ['const Point3d&', 'p2', '', []],
        ['const Color&', 'c1', '', []],
        ['const Color', 'c2', '', []]],
    None,
    'Paint cloud with gradient specified by given colors between given points']
parse_name: cv.viz.WPaintedCloud.WPaintedCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WPaintedCloud::WPaintedCloud namespace:cv::viz classpath:WPaintedCloud classname:WPaintedCloud name:WPaintedCloud
register (constructor) new in cv::viz::WPaintedCloud (cv_viz_WPaintedCloud_WPaintedCloud__InputArray_Point3d_Point3d_Color_Color)

--- Incoming ---
[   'class cv.viz.WCloudCollection',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget defines a collection of clouds. :\n'
    '@note In case there are four channels in the cloud, fourth channel is '
    'ignored.']
parse_name: class cv.viz.WCloudCollection with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloudCollection namespace:cv::viz classpath: classname: name:WCloudCollection
register class cv::viz::WCloudCollection (['class cv.viz.WCloudCollection', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget defines a collection of clouds. :\n@note In case there are four channels in the cloud, fourth channel is ignored.']) impl:cv::viz::Widget3D

--- Incoming ---
['cv.viz.WCloudCollection.WCloudCollection', 'W', [], [], None, '']
parse_name: cv.viz.WCloudCollection.WCloudCollection with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloudCollection::WCloudCollection namespace:cv::viz classpath:WCloudCollection classname:WCloudCollection name:WCloudCollection
register (constructor) default in cv::viz::WCloudCollection (cv_viz_WCloudCollection_WCloudCollection)

--- Incoming ---
[   'cv.viz.WCloudCollection.addCloud',
    'void',
    [],
    [   ['InputArray', 'cloud', '', []],
        ['InputArray', 'colors', '', []],
        ['const Affine3d &', 'pose', 'Affine3d::Identity()', []]],
    None,
    '@brief Adds a cloud to the collection.\n'
    '\n'
    '@param cloud Point set which can be of type: CV_32FC3, CV_32FC4, '
    'CV_64FC3, CV_64FC4.\n'
    '@param colors Set of colors. It has to be of the same size with cloud.\n'
    '@param pose Pose of the cloud. Points in the cloud belong to mask when '
    'they are set to (NaN, NaN, NaN).']
parse_name: cv.viz.WCloudCollection.addCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloudCollection::addCloud namespace:cv::viz classpath:WCloudCollection classname:WCloudCollection name:addCloud
register (method) addCloud in cv::viz::WCloudCollection (cv_viz_WCloudCollection_addCloud__InputArray__InputArray_Affine3d)

--- Incoming ---
[   'cv.viz.WCloudCollection.addCloud',
    'void',
    [],
    [   ['InputArray', 'cloud', '', []],
        ['const Color &', 'color', 'Color::white()', []],
        ['const Affine3d &', 'pose', 'Affine3d::Identity()', []]],
    None,
    '@brief Adds a cloud to the collection.\n'
    '\n'
    '@param cloud Point set which can be of type: CV_32FC3, CV_32FC4, '
    'CV_64FC3, CV_64FC4.\n'
    '@param color A single Color for the whole cloud.\n'
    '@param pose Pose of the cloud. Points in the cloud belong to mask when '
    'they are set to (NaN, NaN, NaN).']
parse_name: cv.viz.WCloudCollection.addCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloudCollection::addCloud namespace:cv::viz classpath:WCloudCollection classname:WCloudCollection name:addCloud
register (method) addCloud in cv::viz::WCloudCollection (cv_viz_WCloudCollection_addCloud__InputArray_Color_Affine3d)

--- Incoming ---
[   'cv.viz.WCloudCollection.finalize',
    'void',
    [],
    [],
    None,
    '@brief Finalizes cloud data by repacking to single cloud.\n'
    '\n'
    'Useful for large cloud collections to reduce memory usage']
parse_name: cv.viz.WCloudCollection.finalize with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloudCollection::finalize namespace:cv::viz classpath:WCloudCollection classname:WCloudCollection name:finalize
register (method) finalize in cv::viz::WCloudCollection (cv_viz_WCloudCollection_finalize)

--- Incoming ---
[   'class cv.viz.WCloudNormals',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This 3D Widget represents normals of a point cloud. :']
parse_name: class cv.viz.WCloudNormals with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloudNormals namespace:cv::viz classpath: classname: name:WCloudNormals
register class cv::viz::WCloudNormals (['class cv.viz.WCloudNormals', ': cv::viz::Widget3D', [], [], None, '@brief This 3D Widget represents normals of a point cloud. :']) impl:cv::viz::Widget3D

--- Incoming ---
[   'cv.viz.WCloudNormals.WCloudNormals',
    'W',
    [],
    [   ['InputArray', 'cloud', '', []],
        ['InputArray', 'normals', '', []],
        ['int', 'level', '64', []],
        ['double', 'scale', '0.1', []],
        ['const Color &', 'color', 'Color::white()', []]],
    None,
    '@brief Constructs a WCloudNormals.\n'
    '\n'
    '@param cloud Point set which can be of type: CV_32FC3, CV_32FC4, '
    'CV_64FC3, CV_64FC4.\n'
    '@param normals A set of normals that has to be of same type with cloud.\n'
    '@param level Display only every level th normal.\n'
    '@param scale Scale of the arrows that represent normals.\n'
    '@param color Color of the arrows that represent normals.\n'
    '\n'
    '@note In case there are four channels in the cloud, fourth channel is '
    'ignored.']
parse_name: cv.viz.WCloudNormals.WCloudNormals with ['cv', 'cv::viz'] -> fullname:cv::viz::WCloudNormals::WCloudNormals namespace:cv::viz classpath:WCloudNormals classname:WCloudNormals name:WCloudNormals
register (constructor) new in cv::viz::WCloudNormals (cv_viz_WCloudNormals_WCloudNormals__InputArray__InputArray_int_double_Color)

--- Incoming ---
[   'class cv.viz.WMesh',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief Constructs a WMesh.\n'
    '\n'
    '@param mesh Mesh object that will be displayed.\n'
    '@param cloud Points of the mesh object.\n'
    '@param polygons Points of the mesh object.\n'
    '@param colors Point colors.\n'
    '@param normals Point normals.']
parse_name: class cv.viz.WMesh with ['cv', 'cv::viz'] -> fullname:cv::viz::WMesh namespace:cv::viz classpath: classname: name:WMesh
register class cv::viz::WMesh (['class cv.viz.WMesh', ': cv::viz::Widget3D', [], [], None, '@brief Constructs a WMesh.\n\n@param mesh Mesh object that will be displayed.\n@param cloud Points of the mesh object.\n@param polygons Points of the mesh object.\n@param colors Point colors.\n@param normals Point normals.']) impl:cv::viz::Widget3D

--- Incoming ---
['cv.viz.WMesh.WMesh', 'W', [], [['const Mesh &', 'mesh', '', []]], None, '']
parse_name: cv.viz.WMesh.WMesh with ['cv', 'cv::viz'] -> fullname:cv::viz::WMesh::WMesh namespace:cv::viz classpath:WMesh classname:WMesh name:WMesh
register (constructor) new in cv::viz::WMesh (cv_viz_WMesh_WMesh_Mesh)

--- Incoming ---
[   'cv.viz.WMesh.WMesh',
    'W',
    [],
    [   ['InputArray', 'cloud', '', []],
        ['InputArray', 'polygons', '', []],
        ['InputArray', 'colors', 'noArray()', []],
        ['InputArray', 'normals', 'noArray()', []]],
    None,
    '']
parse_name: cv.viz.WMesh.WMesh with ['cv', 'cv::viz'] -> fullname:cv::viz::WMesh::WMesh namespace:cv::viz classpath:WMesh classname:WMesh name:WMesh
register (constructor) new in cv::viz::WMesh (cv_viz_WMesh_WMesh__InputArray__InputArray__InputArray__InputArray)

--- Incoming ---
[   'class cv.viz.WWidgetMerger',
    ': cv::viz::Widget3D',
    [],
    [],
    None,
    '@brief This class allows to merge several widgets to single one.\n'
    '\n'
    "It has quite limited functionality and can't merge widgets with different "
    'attributes. For\n'
    'instance, if widgetA has color array and widgetB has only global color '
    'defined, then result\n'
    "of merge won't have color at all. The class is suitable for merging large "
    'amount of similar\n'
    'widgets. :']
parse_name: class cv.viz.WWidgetMerger with ['cv', 'cv::viz'] -> fullname:cv::viz::WWidgetMerger namespace:cv::viz classpath: classname: name:WWidgetMerger
register class cv::viz::WWidgetMerger (['class cv.viz.WWidgetMerger', ': cv::viz::Widget3D', [], [], None, "@brief This class allows to merge several widgets to single one.\n\nIt has quite limited functionality and can't merge widgets with different attributes. For\ninstance, if widgetA has color array and widgetB has only global color defined, then result\nof merge won't have color at all. The class is suitable for merging large amount of similar\nwidgets. :"]) impl:cv::viz::Widget3D

--- Incoming ---
['cv.viz.WWidgetMerger.WWidgetMerger', 'W', [], [], None, '']
parse_name: cv.viz.WWidgetMerger.WWidgetMerger with ['cv', 'cv::viz'] -> fullname:cv::viz::WWidgetMerger::WWidgetMerger namespace:cv::viz classpath:WWidgetMerger classname:WWidgetMerger name:WWidgetMerger
register (constructor) default in cv::viz::WWidgetMerger (cv_viz_WWidgetMerger_WWidgetMerger)

--- Incoming ---
[   'cv.viz.WWidgetMerger.addWidget',
    'void',
    [],
    [   ['const Widget3D&', 'widget', '', []],
        ['const Affine3d &', 'pose', 'Affine3d::Identity()', []]],
    None,
    'Add widget to merge with optional position change']
parse_name: cv.viz.WWidgetMerger.addWidget with ['cv', 'cv::viz'] -> fullname:cv::viz::WWidgetMerger::addWidget namespace:cv::viz classpath:WWidgetMerger classname:WWidgetMerger name:addWidget
register (method) addWidget in cv::viz::WWidgetMerger (cv_viz_WWidgetMerger_addWidget_Widget3D_Affine3d)

--- Incoming ---
[   'cv.viz.WWidgetMerger.finalize',
    'void',
    [],
    [],
    None,
    'Repacks internal structure to single widget']
parse_name: cv.viz.WWidgetMerger.finalize with ['cv', 'cv::viz'] -> fullname:cv::viz::WWidgetMerger::finalize namespace:cv::viz classpath:WWidgetMerger classname:WWidgetMerger name:finalize
register (method) finalize in cv::viz::WWidgetMerger (cv_viz_WWidgetMerger_finalize)

--- Incoming ---
['cv.viz.Widget.cast < Widget2D >', 'template<> Widget2D', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < Widget2D > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < Widget2D > namespace:cv::viz classpath:Widget classname:Widget name:cast < Widget2D >
Registering an unknown type: template<> Widget2D
register (method) cast < Widget2D > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_Widget2D_>_const)

--- Incoming ---
['cv.viz.Widget.cast < Widget3D >', 'template<> Widget3D', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < Widget3D > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < Widget3D > namespace:cv::viz classpath:Widget classname:Widget name:cast < Widget3D >
Registering an unknown type: template<> Widget3D
register (method) cast < Widget3D > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_Widget3D_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WLine >', 'template<> WLine', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WLine > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WLine > namespace:cv::viz classpath:Widget classname:Widget name:cast < WLine >
Registering an unknown type: template<> WLine
register (method) cast < WLine > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WLine_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WPlane >', 'template<> WPlane', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WPlane > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WPlane > namespace:cv::viz classpath:Widget classname:Widget name:cast < WPlane >
Registering an unknown type: template<> WPlane
register (method) cast < WPlane > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WPlane_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WSphere >', 'template<> WSphere', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WSphere > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WSphere > namespace:cv::viz classpath:Widget classname:Widget name:cast < WSphere >
Registering an unknown type: template<> WSphere
register (method) cast < WSphere > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WSphere_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WCylinder >',
    'template<> WCylinder',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WCylinder > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WCylinder > namespace:cv::viz classpath:Widget classname:Widget name:cast < WCylinder >
Registering an unknown type: template<> WCylinder
register (method) cast < WCylinder > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WCylinder_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WArrow >', 'template<> WArrow', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WArrow > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WArrow > namespace:cv::viz classpath:Widget classname:Widget name:cast < WArrow >
Registering an unknown type: template<> WArrow
register (method) cast < WArrow > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WArrow_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WCircle >', 'template<> WCircle', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WCircle > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WCircle > namespace:cv::viz classpath:Widget classname:Widget name:cast < WCircle >
Registering an unknown type: template<> WCircle
register (method) cast < WCircle > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WCircle_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WCone >', 'template<> WCone', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WCone > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WCone > namespace:cv::viz classpath:Widget classname:Widget name:cast < WCone >
Registering an unknown type: template<> WCone
register (method) cast < WCone > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WCone_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WCube >', 'template<> WCube', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WCube > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WCube > namespace:cv::viz classpath:Widget classname:Widget name:cast < WCube >
Registering an unknown type: template<> WCube
register (method) cast < WCube > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WCube_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WCoordinateSystem >',
    'template<> WCoordinateSystem',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WCoordinateSystem > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WCoordinateSystem > namespace:cv::viz classpath:Widget classname:Widget name:cast < WCoordinateSystem >
Registering an unknown type: template<> WCoordinateSystem
register (method) cast < WCoordinateSystem > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WCoordinateSystem_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WPolyLine >',
    'template<> WPolyLine',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WPolyLine > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WPolyLine > namespace:cv::viz classpath:Widget classname:Widget name:cast < WPolyLine >
Registering an unknown type: template<> WPolyLine
register (method) cast < WPolyLine > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WPolyLine_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WGrid >', 'template<> WGrid', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WGrid > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WGrid > namespace:cv::viz classpath:Widget classname:Widget name:cast < WGrid >
Registering an unknown type: template<> WGrid
register (method) cast < WGrid > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WGrid_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WText3D >', 'template<> WText3D', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WText3D > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WText3D > namespace:cv::viz classpath:Widget classname:Widget name:cast < WText3D >
Registering an unknown type: template<> WText3D
register (method) cast < WText3D > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WText3D_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WText >', 'template<> WText', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WText > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WText > namespace:cv::viz classpath:Widget classname:Widget name:cast < WText >
Registering an unknown type: template<> WText
register (method) cast < WText > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WText_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WImageOverlay >',
    'template<> WImageOverlay',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WImageOverlay > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WImageOverlay > namespace:cv::viz classpath:Widget classname:Widget name:cast < WImageOverlay >
Registering an unknown type: template<> WImageOverlay
register (method) cast < WImageOverlay > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WImageOverlay_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WImage3D >', 'template<> WImage3D', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WImage3D > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WImage3D > namespace:cv::viz classpath:Widget classname:Widget name:cast < WImage3D >
Registering an unknown type: template<> WImage3D
register (method) cast < WImage3D > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WImage3D_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WCameraPosition >',
    'template<> WCameraPosition',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WCameraPosition > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WCameraPosition > namespace:cv::viz classpath:Widget classname:Widget name:cast < WCameraPosition >
Registering an unknown type: template<> WCameraPosition
register (method) cast < WCameraPosition > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WCameraPosition_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WTrajectory >',
    'template<> WTrajectory',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WTrajectory > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WTrajectory > namespace:cv::viz classpath:Widget classname:Widget name:cast < WTrajectory >
Registering an unknown type: template<> WTrajectory
register (method) cast < WTrajectory > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WTrajectory_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WTrajectoryFrustums >',
    'template<> WTrajectoryFrustums',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WTrajectoryFrustums > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WTrajectoryFrustums > namespace:cv::viz classpath:Widget classname:Widget name:cast < WTrajectoryFrustums >
Registering an unknown type: template<> WTrajectoryFrustums
register (method) cast < WTrajectoryFrustums > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WTrajectoryFrustums_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WTrajectorySpheres >',
    'template<> WTrajectorySpheres',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WTrajectorySpheres > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WTrajectorySpheres > namespace:cv::viz classpath:Widget classname:Widget name:cast < WTrajectorySpheres >
Registering an unknown type: template<> WTrajectorySpheres
register (method) cast < WTrajectorySpheres > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WTrajectorySpheres_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WCloud >', 'template<> WCloud', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WCloud > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WCloud > namespace:cv::viz classpath:Widget classname:Widget name:cast < WCloud >
Registering an unknown type: template<> WCloud
register (method) cast < WCloud > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WCloud_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WPaintedCloud >',
    'template<> WPaintedCloud',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WPaintedCloud > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WPaintedCloud > namespace:cv::viz classpath:Widget classname:Widget name:cast < WPaintedCloud >
Registering an unknown type: template<> WPaintedCloud
register (method) cast < WPaintedCloud > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WPaintedCloud_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WCloudCollection >',
    'template<> WCloudCollection',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WCloudCollection > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WCloudCollection > namespace:cv::viz classpath:Widget classname:Widget name:cast < WCloudCollection >
Registering an unknown type: template<> WCloudCollection
register (method) cast < WCloudCollection > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WCloudCollection_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WCloudNormals >',
    'template<> WCloudNormals',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WCloudNormals > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WCloudNormals > namespace:cv::viz classpath:Widget classname:Widget name:cast < WCloudNormals >
Registering an unknown type: template<> WCloudNormals
register (method) cast < WCloudNormals > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WCloudNormals_>_const)

--- Incoming ---
['cv.viz.Widget.cast < WMesh >', 'template<> WMesh', ['/C'], [], None, '']
parse_name: cv.viz.Widget.cast < WMesh > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WMesh > namespace:cv::viz classpath:Widget classname:Widget name:cast < WMesh >
Registering an unknown type: template<> WMesh
register (method) cast < WMesh > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WMesh_>_const)

--- Incoming ---
[   'cv.viz.Widget.cast < WWidgetMerger >',
    'template<> WWidgetMerger',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.viz.Widget.cast < WWidgetMerger > with ['cv', 'cv::viz'] -> fullname:cv::viz::Widget::cast < WWidgetMerger > namespace:cv::viz classpath:Widget classname:Widget name:cast < WWidgetMerger >
Registering an unknown type: template<> WWidgetMerger
register (method) cast < WWidgetMerger > in cv::viz::Widget (trait) (cv_viz_Widget_cast_<_WWidgetMerger_>_const)


=============== Header: /Users/calumbruton/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.26.6/headers/4.1/opencv2/viz.hpp ================


Namespaces: ['cv', 'cv.viz']
Comment: {'viz': '\n@defgroup viz 3D Visualizer\n\nThis section describes 3D visualization window as well as classes and methods that are used to\ninteract with it.\n\n3D visualization window (see Viz3d) is used to display widgets (see Widget), and it provides several\nmethods to interact with scene and widgets.\n\n@{\n@defgroup viz_widget Widget\n\nIn this section, the widget framework is explained. Widgets represent 2D or 3D objects, varying from\nsimple ones such as lines to complex ones such as point clouds and meshes.\n\nWidgets are **implicitly shared**. Therefore, one can add a widget to the scene, and modify the\nwidget without re-adding the widget.\n\n@code\n// Create a cloud widget\nviz::WCloud cw(cloud, viz::Color::red());\n// Display it in a window\nmyWindow.showWidget("CloudWidget1", cw);\n// Modify it, and it will be modified in the window.\ncw.setColor(viz::Color::yellow());\n@endcode\n\n@}\n\n'}


=============== Header: /Users/calumbruton/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.26.6/headers/4.1/opencv2/viz/viz3d.hpp ================


Namespaces: ['cv', 'cv.viz']
Comment: {'viz': '\n@defgroup viz 3D Visualizer\n\nThis section describes 3D visualization window as well as classes and methods that are used to\ninteract with it.\n\n3D visualization window (see Viz3d) is used to display widgets (see Widget), and it provides several\nmethods to interact with scene and widgets.\n\n@{\n@defgroup viz_widget Widget\n\nIn this section, the widget framework is explained. Widgets represent 2D or 3D objects, varying from\nsimple ones such as lines to complex ones such as point clouds and meshes.\n\nWidgets are **implicitly shared**. Therefore, one can add a widget to the scene, and modify the\nwidget without re-adding the widget.\n\n@code\n// Create a cloud widget\nviz::WCloud cw(cloud, viz::Color::red());\n// Display it in a window\nmyWindow.showWidget("CloudWidget1", cw);\n// Modify it, and it will be modified in the window.\ncw.setColor(viz::Color::yellow());\n@endcode\n\n@}\n\n'}

--- Incoming ---
[   'class cv.viz.Viz3d',
    '',
    [],
    [],
    None,
    '@brief The Viz3d class represents a 3D visualizer window. This class is '
    'implicitly shared.']
parse_name: class cv.viz.Viz3d with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d namespace:cv::viz classpath: classname: name:Viz3d
register class cv::viz::Viz3d (['class cv.viz.Viz3d', '', [], [], None, '@brief The Viz3d class represents a 3D visualizer window. This class is implicitly shared.'])

--- Incoming ---
['typedef cv.viz.Viz3d.Color', 'cv::viz::Color', '', [], None, '']
parse_name: typedef cv.viz.Viz3d.Color with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::Color namespace:cv::viz classpath:Viz3d classname:Viz3d name:Color

--- Incoming ---
[   'callback cv.viz.Viz3d.KeyboardCallback',
    'void',
    '',
    [['const KeyboardEvent&', ''], ['void*', '']],
    None,
    '']
parse_name: callback cv.viz.Viz3d.KeyboardCallback with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::KeyboardCallback namespace:cv::viz classpath:Viz3d classname:Viz3d name:KeyboardCallback
parse_name: class cv.viz.Viz3d.KeyboardCallback with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::KeyboardCallback namespace:cv::viz classpath:Viz3d classname:Viz3d name:KeyboardCallback
register class cv::viz::Viz3d::KeyboardCallback (('class cv.viz.Viz3d.KeyboardCallback', '', ['/Ghost', '/Callback'], []))

--- Incoming ---
[   'callback cv.viz.Viz3d.MouseCallback',
    'void',
    '',
    [['const MouseEvent&', ''], ['void*', '']],
    None,
    '']
parse_name: callback cv.viz.Viz3d.MouseCallback with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::MouseCallback namespace:cv::viz classpath:Viz3d classname:Viz3d name:MouseCallback
parse_name: class cv.viz.Viz3d.MouseCallback with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::MouseCallback namespace:cv::viz classpath:Viz3d classname:Viz3d name:MouseCallback
register class cv::viz::Viz3d::MouseCallback (('class cv.viz.Viz3d.MouseCallback', '', ['/Ghost', '/Callback'], []))

--- Incoming ---
[   'cv.viz.Viz3d.Viz3d',
    'V',
    [],
    [['const String&', 'window_name', 'String()', []]],
    None,
    '@brief The constructors.\n\n@param window_name Name of the window.']
parse_name: cv.viz.Viz3d.Viz3d with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::Viz3d namespace:cv::viz classpath:Viz3d classname:Viz3d name:Viz3d
register (constructor) new in cv::viz::Viz3d (cv_viz_Viz3d_Viz3d_String)

--- Incoming ---
['cv.viz.Viz3d.Viz3d', 'V', [], [['const Viz3d&', '', '', []]], None, '']
parse_name: cv.viz.Viz3d.Viz3d with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::Viz3d namespace:cv::viz classpath:Viz3d classname:Viz3d name:Viz3d
register (constructor) copy in cv::viz::Viz3d (cv_viz_Viz3d_Viz3d_Viz3d)

--- Incoming ---
[   'cv.viz.Viz3d.operator=',
    'Viz3d&',
    [],
    [['const Viz3d&', '', '', []]],
    None,
    '']
parse_name: cv.viz.Viz3d.operator= with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::operator= namespace:cv::viz classpath:Viz3d classname:Viz3d name:operator=
ignore (method) operator= in cv::viz::Viz3d

--- Incoming ---
['cv.viz.Viz3d.~Viz3d', '~', [], [], None, '']
parse_name: cv.viz.Viz3d.~Viz3d with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::~Viz3d namespace:cv::viz classpath:Viz3d classname:Viz3d name:~Viz3d
ignore destructor (method) ~Viz3d in cv::viz::Viz3d

--- Incoming ---
[   'cv.viz.Viz3d.showWidget',
    'void',
    [],
    [   ['const String &', 'id', '', []],
        ['const Widget &', 'widget', '', []],
        ['const Affine3d &', 'pose', 'Affine3d::Identity()', []]],
    None,
    '@brief Shows a widget in the window.\n'
    '\n'
    '@param id A unique id for the widget. @param widget The widget to be '
    'displayed in the window.\n'
    '@param pose Pose of the widget.']
parse_name: cv.viz.Viz3d.showWidget with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::showWidget namespace:cv::viz classpath:Viz3d classname:Viz3d name:showWidget
register (method) showWidget in cv::viz::Viz3d (cv_viz_Viz3d_showWidget_String_Widget_Affine3d)

--- Incoming ---
[   'cv.viz.Viz3d.removeWidget',
    'void',
    [],
    [['const String &', 'id', '', []]],
    None,
    '@brief Removes a widget from the window.\n'
    '\n'
    '@param id The id of the widget that will be removed.']
parse_name: cv.viz.Viz3d.removeWidget with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::removeWidget namespace:cv::viz classpath:Viz3d classname:Viz3d name:removeWidget
register (method) removeWidget in cv::viz::Viz3d (cv_viz_Viz3d_removeWidget_String)

--- Incoming ---
[   'cv.viz.Viz3d.getWidget',
    'Widget',
    ['/C'],
    [['const String &', 'id', '', []]],
    None,
    '@brief Retrieves a widget from the window.\n'
    '\n'
    'A widget is implicitly shared; that is, if the returned widget is '
    'modified, the changes\n'
    'will be immediately visible in the window.\n'
    '\n'
    '@param id The id of the widget that will be returned.']
parse_name: cv.viz.Viz3d.getWidget with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::getWidget namespace:cv::viz classpath:Viz3d classname:Viz3d name:getWidget
register (method) getWidget in cv::viz::Viz3d (cv_viz_Viz3d_getWidget_const_String)

--- Incoming ---
[   'cv.viz.Viz3d.removeAllWidgets',
    'void',
    [],
    [],
    None,
    '@brief Removes all widgets from the window.']
parse_name: cv.viz.Viz3d.removeAllWidgets with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::removeAllWidgets namespace:cv::viz classpath:Viz3d classname:Viz3d name:removeAllWidgets
register (method) removeAllWidgets in cv::viz::Viz3d (cv_viz_Viz3d_removeAllWidgets)

--- Incoming ---
[   'cv.viz.Viz3d.showImage',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['const Size&', 'window_size', 'Size(-1, -1)', []]],
    None,
    '@brief Removed all widgets and displays image scaled to whole window '
    'area.\n'
    '\n'
    '@param image Image to be displayed.\n'
    '@param window_size Size of Viz3d window. Default value means no change.']
parse_name: cv.viz.Viz3d.showImage with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::showImage namespace:cv::viz classpath:Viz3d classname:Viz3d name:showImage
register (method) showImage in cv::viz::Viz3d (cv_viz_Viz3d_showImage__InputArray_Size)

--- Incoming ---
[   'cv.viz.Viz3d.setWidgetPose',
    'void',
    [],
    [['const String &', 'id', '', []], ['const Affine3d &', 'pose', '', []]],
    None,
    '@brief Sets pose of a widget in the window.\n'
    '\n'
    '@param id The id of the widget whose pose will be set. @param pose The '
    'new pose of the widget.']
parse_name: cv.viz.Viz3d.setWidgetPose with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setWidgetPose namespace:cv::viz classpath:Viz3d classname:Viz3d name:setWidgetPose
register (method) setWidgetPose in cv::viz::Viz3d (cv_viz_Viz3d_setWidgetPose_String_Affine3d)

--- Incoming ---
[   'cv.viz.Viz3d.updateWidgetPose',
    'void',
    [],
    [['const String &', 'id', '', []], ['const Affine3d &', 'pose', '', []]],
    None,
    '@brief Updates pose of a widget in the window by pre-multiplying its '
    'current pose.\n'
    '\n'
    '@param id The id of the widget whose pose will be updated. @param pose '
    'The pose that the current\n'
    'pose of the widget will be pre-multiplied by.']
parse_name: cv.viz.Viz3d.updateWidgetPose with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::updateWidgetPose namespace:cv::viz classpath:Viz3d classname:Viz3d name:updateWidgetPose
register (method) updateWidgetPose in cv::viz::Viz3d (cv_viz_Viz3d_updateWidgetPose_String_Affine3d)

--- Incoming ---
[   'cv.viz.Viz3d.getWidgetPose',
    'Affine3d',
    ['/C'],
    [['const String &', 'id', '', []]],
    None,
    '@brief Returns the current pose of a widget in the window.\n'
    '\n'
    '@param id The id of the widget whose pose will be returned.']
parse_name: cv.viz.Viz3d.getWidgetPose with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::getWidgetPose namespace:cv::viz classpath:Viz3d classname:Viz3d name:getWidgetPose
register (method) getWidgetPose in cv::viz::Viz3d (cv_viz_Viz3d_getWidgetPose_const_String)

--- Incoming ---
[   'cv.viz.Viz3d.setCamera',
    'void',
    [],
    [['const Camera &', 'camera', '', []]],
    None,
    '@brief Sets the intrinsic parameters of the viewer using Camera.\n'
    '\n'
    '@param camera Camera object wrapping intrinsic parameters.']
parse_name: cv.viz.Viz3d.setCamera with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setCamera namespace:cv::viz classpath:Viz3d classname:Viz3d name:setCamera
register (method) setCamera in cv::viz::Viz3d (cv_viz_Viz3d_setCamera_Camera)

--- Incoming ---
[   'cv.viz.Viz3d.getCamera',
    'Camera',
    ['/C'],
    [],
    None,
    '@brief Returns a camera object that contains intrinsic parameters of the '
    'current viewer.']
parse_name: cv.viz.Viz3d.getCamera with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::getCamera namespace:cv::viz classpath:Viz3d classname:Viz3d name:getCamera
register (method) getCamera in cv::viz::Viz3d (cv_viz_Viz3d_getCamera_const)

--- Incoming ---
[   'cv.viz.Viz3d.getViewerPose',
    'Affine3d',
    ['/C'],
    [],
    None,
    '@brief Returns the current pose of the viewer.']
parse_name: cv.viz.Viz3d.getViewerPose with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::getViewerPose namespace:cv::viz classpath:Viz3d classname:Viz3d name:getViewerPose
register (method) getViewerPose in cv::viz::Viz3d (cv_viz_Viz3d_getViewerPose_const)

--- Incoming ---
[   'cv.viz.Viz3d.setViewerPose',
    'void',
    [],
    [['const Affine3d &', 'pose', '', []]],
    None,
    '@brief Sets pose of the viewer.\n'
    '\n'
    '@param pose The new pose of the viewer.']
parse_name: cv.viz.Viz3d.setViewerPose with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setViewerPose namespace:cv::viz classpath:Viz3d classname:Viz3d name:setViewerPose
register (method) setViewerPose in cv::viz::Viz3d (cv_viz_Viz3d_setViewerPose_Affine3d)

--- Incoming ---
[   'cv.viz.Viz3d.resetCameraViewpoint',
    'void',
    [],
    [['const String &', 'id', '', []]],
    None,
    '@brief Resets camera viewpoint to a 3D widget in the scene.\n'
    '\n'
    '@param id Id of a 3D widget.']
parse_name: cv.viz.Viz3d.resetCameraViewpoint with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::resetCameraViewpoint namespace:cv::viz classpath:Viz3d classname:Viz3d name:resetCameraViewpoint
register (method) resetCameraViewpoint in cv::viz::Viz3d (cv_viz_Viz3d_resetCameraViewpoint_String)

--- Incoming ---
['cv.viz.Viz3d.resetCamera', 'void', [], [], None, '@brief Resets camera.']
parse_name: cv.viz.Viz3d.resetCamera with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::resetCamera namespace:cv::viz classpath:Viz3d classname:Viz3d name:resetCamera
register (method) resetCamera in cv::viz::Viz3d (cv_viz_Viz3d_resetCamera)

--- Incoming ---
[   'cv.viz.Viz3d.convertToWindowCoordinates',
    'void',
    [],
    [['const Point3d &', 'pt', '', []], ['Point3d &', 'window_coord', '', []]],
    None,
    '@brief Transforms a point in world coordinate system to window coordinate '
    'system.\n'
    '\n'
    '@param pt Point in world coordinate system.\n'
    '@param window_coord Output point in window coordinate system.']
parse_name: cv.viz.Viz3d.convertToWindowCoordinates with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::convertToWindowCoordinates namespace:cv::viz classpath:Viz3d classname:Viz3d name:convertToWindowCoordinates
register (method) convertToWindowCoordinates in cv::viz::Viz3d (cv_viz_Viz3d_convertToWindowCoordinates_Point3d_Point3d)

--- Incoming ---
[   'cv.viz.Viz3d.converTo3DRay',
    'void',
    [],
    [   ['const Point3d &', 'window_coord', '', []],
        ['Point3d &', 'origin', '', []],
        ['Vec3d &', 'direction', '', []]],
    None,
    '@brief Transforms a point in window coordinate system to a 3D ray in '
    'world coordinate system.\n'
    '\n'
    '@param window_coord Point in window coordinate system. @param origin '
    'Output origin of the ray.\n'
    '@param direction Output direction of the ray.']
parse_name: cv.viz.Viz3d.converTo3DRay with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::converTo3DRay namespace:cv::viz classpath:Viz3d classname:Viz3d name:converTo3DRay
register (method) converTo3DRay in cv::viz::Viz3d (cv_viz_Viz3d_converTo3DRay_Point3d_Point3d_Vec3d)

--- Incoming ---
[   'cv.viz.Viz3d.getWindowSize',
    'Size',
    ['/C'],
    [],
    None,
    '@brief Returns the current size of the window.']
parse_name: cv.viz.Viz3d.getWindowSize with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::getWindowSize namespace:cv::viz classpath:Viz3d classname:Viz3d name:getWindowSize
register (method) getWindowSize in cv::viz::Viz3d (cv_viz_Viz3d_getWindowSize_const)

--- Incoming ---
[   'cv.viz.Viz3d.setWindowSize',
    'void',
    [],
    [['const Size &', 'window_size', '', []]],
    None,
    '@brief Sets the size of the window.\n'
    '\n'
    '@param window_size New size of the window.']
parse_name: cv.viz.Viz3d.setWindowSize with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setWindowSize namespace:cv::viz classpath:Viz3d classname:Viz3d name:setWindowSize
register (method) setWindowSize in cv::viz::Viz3d (cv_viz_Viz3d_setWindowSize_Size)

--- Incoming ---
[   'cv.viz.Viz3d.getWindowName',
    'String',
    ['/C'],
    [],
    None,
    '@brief Returns the name of the window which has been set in the '
    'constructor.\n'
    '*  `Viz - ` is prepended to the name if necessary.']
parse_name: cv.viz.Viz3d.getWindowName with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::getWindowName namespace:cv::viz classpath:Viz3d classname:Viz3d name:getWindowName
register (method) getWindowName in cv::viz::Viz3d (cv_viz_Viz3d_getWindowName_const)

--- Incoming ---
[   'cv.viz.Viz3d.getScreenshot',
    'cv::Mat',
    ['/C'],
    [],
    None,
    '@brief Returns the Mat screenshot of the current scene.']
parse_name: cv.viz.Viz3d.getScreenshot with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::getScreenshot namespace:cv::viz classpath:Viz3d classname:Viz3d name:getScreenshot
register (method) getScreenshot in cv::viz::Viz3d (cv_viz_Viz3d_getScreenshot_const)

--- Incoming ---
[   'cv.viz.Viz3d.saveScreenshot',
    'void',
    [],
    [['const String &', 'file', '', []]],
    None,
    '@brief Saves screenshot of the current scene.\n'
    '\n'
    '@param file Name of the file.']
parse_name: cv.viz.Viz3d.saveScreenshot with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::saveScreenshot namespace:cv::viz classpath:Viz3d classname:Viz3d name:saveScreenshot
register (method) saveScreenshot in cv::viz::Viz3d (cv_viz_Viz3d_saveScreenshot_String)

--- Incoming ---
[   'cv.viz.Viz3d.setWindowPosition',
    'void',
    [],
    [['const Point&', 'window_position', '', []]],
    None,
    '@brief Sets the position of the window in the screen.\n'
    '\n'
    '@param window_position coordinates of the window']
parse_name: cv.viz.Viz3d.setWindowPosition with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setWindowPosition namespace:cv::viz classpath:Viz3d classname:Viz3d name:setWindowPosition
register (method) setWindowPosition in cv::viz::Viz3d (cv_viz_Viz3d_setWindowPosition_Point)

--- Incoming ---
[   'cv.viz.Viz3d.setFullScreen',
    'void',
    [],
    [['bool', 'mode', 'true', []]],
    None,
    '@brief Sets or unsets full-screen rendering mode.\n'
    '\n'
    '@param mode If true, window will use full-screen mode.']
parse_name: cv.viz.Viz3d.setFullScreen with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setFullScreen namespace:cv::viz classpath:Viz3d classname:Viz3d name:setFullScreen
register (method) setFullScreen in cv::viz::Viz3d (cv_viz_Viz3d_setFullScreen_bool)

--- Incoming ---
[   'cv.viz.Viz3d.setBackgroundColor',
    'void',
    [],
    [   ['const Color&', 'color', 'Color::black()', []],
        ['const Color&', 'color2', 'Color::not_set()', []]],
    None,
    '@brief Sets background color.']
parse_name: cv.viz.Viz3d.setBackgroundColor with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setBackgroundColor namespace:cv::viz classpath:Viz3d classname:Viz3d name:setBackgroundColor
register (method) setBackgroundColor in cv::viz::Viz3d (cv_viz_Viz3d_setBackgroundColor_Color_Color)

--- Incoming ---
[   'cv.viz.Viz3d.setBackgroundTexture',
    'void',
    [],
    [['InputArray', 'image', 'noArray()', []]],
    None,
    '']
parse_name: cv.viz.Viz3d.setBackgroundTexture with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setBackgroundTexture namespace:cv::viz classpath:Viz3d classname:Viz3d name:setBackgroundTexture
register (method) setBackgroundTexture in cv::viz::Viz3d (cv_viz_Viz3d_setBackgroundTexture__InputArray)

--- Incoming ---
['cv.viz.Viz3d.setBackgroundMeshLab', 'void', [], [], None, '']
parse_name: cv.viz.Viz3d.setBackgroundMeshLab with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setBackgroundMeshLab namespace:cv::viz classpath:Viz3d classname:Viz3d name:setBackgroundMeshLab
register (method) setBackgroundMeshLab in cv::viz::Viz3d (cv_viz_Viz3d_setBackgroundMeshLab)

--- Incoming ---
[   'cv.viz.Viz3d.spin',
    'void',
    [],
    [],
    None,
    '@brief The window renders and starts the event loop.']
parse_name: cv.viz.Viz3d.spin with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::spin namespace:cv::viz classpath:Viz3d classname:Viz3d name:spin
register (method) spin in cv::viz::Viz3d (cv_viz_Viz3d_spin)

--- Incoming ---
[   'cv.viz.Viz3d.spinOnce',
    'void',
    [],
    [['int', 'time', '1', []], ['bool', 'force_redraw', 'false', []]],
    None,
    '@brief Starts the event loop for a given time.\n'
    '\n'
    '@param time Amount of time in milliseconds for the event loop to keep '
    'running.\n'
    '@param force_redraw If true, window renders.']
parse_name: cv.viz.Viz3d.spinOnce with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::spinOnce namespace:cv::viz classpath:Viz3d classname:Viz3d name:spinOnce
register (method) spinOnce in cv::viz::Viz3d (cv_viz_Viz3d_spinOnce_int_bool)

--- Incoming ---
[   'cv.viz.Viz3d.setOffScreenRendering',
    'void',
    [],
    [],
    None,
    '@brief Create a window in memory instead of on the screen.']
parse_name: cv.viz.Viz3d.setOffScreenRendering with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setOffScreenRendering namespace:cv::viz classpath:Viz3d classname:Viz3d name:setOffScreenRendering
register (method) setOffScreenRendering in cv::viz::Viz3d (cv_viz_Viz3d_setOffScreenRendering)

--- Incoming ---
[   'cv.viz.Viz3d.removeAllLights',
    'void',
    [],
    [],
    None,
    '@brief Remove all lights from the current scene.']
parse_name: cv.viz.Viz3d.removeAllLights with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::removeAllLights namespace:cv::viz classpath:Viz3d classname:Viz3d name:removeAllLights
register (method) removeAllLights in cv::viz::Viz3d (cv_viz_Viz3d_removeAllLights)

--- Incoming ---
[   'cv.viz.Viz3d.addLight',
    'void',
    [],
    [   ['const Vec3d &', 'position', '', []],
        ['const Vec3d &', 'focalPoint', 'Vec3d(0, 0, 0)', []],
        ['const Color &', 'color', 'Color::white()', []],
        ['const Color &', 'diffuseColor', 'Color::white()', []],
        ['const Color &', 'ambientColor', 'Color::black()', []],
        ['const Color &', 'specularColor', 'Color::white()', []]],
    None,
    '@brief Add a light in the scene.\n'
    '\n'
    '@param position The position of the light.\n'
    '@param focalPoint The point at which the light is shining\n'
    '@param color The color of the light\n'
    '@param diffuseColor The diffuse color of the light\n'
    '@param ambientColor The ambient color of the light\n'
    '@param specularColor The specular color of the light']
parse_name: cv.viz.Viz3d.addLight with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::addLight namespace:cv::viz classpath:Viz3d classname:Viz3d name:addLight
register (method) addLight in cv::viz::Viz3d (cv_viz_Viz3d_addLight_Vec3d_Vec3d_Color_Color_Color_Color)

--- Incoming ---
[   'cv.viz.Viz3d.wasStopped',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Returns whether the event loop has been stopped.']
parse_name: cv.viz.Viz3d.wasStopped with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::wasStopped namespace:cv::viz classpath:Viz3d classname:Viz3d name:wasStopped
register (method) wasStopped in cv::viz::Viz3d (cv_viz_Viz3d_wasStopped_const)

--- Incoming ---
['cv.viz.Viz3d.close', 'void', [], [], None, '']
parse_name: cv.viz.Viz3d.close with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::close namespace:cv::viz classpath:Viz3d classname:Viz3d name:close
register (method) close in cv::viz::Viz3d (cv_viz_Viz3d_close)

--- Incoming ---
[   'cv.viz.Viz3d.registerKeyboardCallback',
    'void',
    [],
    [['KeyboardCallback', 'callback', '', []], ['void*', 'cookie', '0', []]],
    None,
    '@brief Sets keyboard handler.\n'
    '\n'
    '@param callback Keyboard callback (void '
    '(\\*KeyboardCallbackFunction(const\n'
    'KeyboardEvent&, void\\*)).\n'
    '@param cookie The optional parameter passed to the callback.']
parse_name: cv.viz.Viz3d.registerKeyboardCallback with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::registerKeyboardCallback namespace:cv::viz classpath:Viz3d classname:Viz3d name:registerKeyboardCallback
ignore function with callback, but without userdata (method) registerKeyboardCallback in cv::viz::Viz3d

--- Incoming ---
[   'cv.viz.Viz3d.registerMouseCallback',
    'void',
    [],
    [['MouseCallback', 'callback', '', []], ['void*', 'cookie', '0', []]],
    None,
    '@brief Sets mouse handler.\n'
    '\n'
    '@param callback Mouse callback (void (\\*MouseCallback)(const '
    'MouseEvent&, void\\*)).\n'
    '@param cookie The optional parameter passed to the callback.']
parse_name: cv.viz.Viz3d.registerMouseCallback with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::registerMouseCallback namespace:cv::viz classpath:Viz3d classname:Viz3d name:registerMouseCallback
ignore function with callback, but without userdata (method) registerMouseCallback in cv::viz::Viz3d

--- Incoming ---
[   'cv.viz.Viz3d.setRenderingProperty',
    'void',
    [],
    [   ['const String &', 'id', '', []],
        ['int', 'property', '', []],
        ['double', 'value', '', []]],
    None,
    '@brief Sets rendering property of a widget.\n'
    '\n'
    '@param id Id of the widget.\n'
    '@param property Property that will be modified.\n'
    '@param value The new value of the property.\n'
    '\n'
    'Rendering property can be one of the following:\n'
    '-   **POINT_SIZE**\n'
    '-   **OPACITY**\n'
    '-   **LINE_WIDTH**\n'
    '-   **FONT_SIZE**\n'
    '\n'
    'REPRESENTATION: Expected values are\n'
    '-   **REPRESENTATION_POINTS**\n'
    '-   **REPRESENTATION_WIREFRAME**\n'
    '-   **REPRESENTATION_SURFACE**\n'
    '\n'
    'IMMEDIATE_RENDERING:\n'
    '-   Turn on immediate rendering by setting the value to 1.\n'
    '-   Turn off immediate rendering by setting the value to 0.\n'
    '\n'
    'SHADING: Expected values are\n'
    '-   **SHADING_FLAT**\n'
    '-   **SHADING_GOURAUD**\n'
    '-   **SHADING_PHONG**']
parse_name: cv.viz.Viz3d.setRenderingProperty with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setRenderingProperty namespace:cv::viz classpath:Viz3d classname:Viz3d name:setRenderingProperty
register (method) setRenderingProperty in cv::viz::Viz3d (cv_viz_Viz3d_setRenderingProperty_String_int_double)

--- Incoming ---
[   'cv.viz.Viz3d.getRenderingProperty',
    'double',
    [],
    [['const String &', 'id', '', []], ['int', 'property', '', []]],
    None,
    '@brief Returns rendering property of a widget.\n'
    '\n'
    '@param id Id of the widget.\n'
    '@param property Property.\n'
    '\n'
    'Rendering property can be one of the following:\n'
    '-   **POINT_SIZE**\n'
    '-   **OPACITY**\n'
    '-   **LINE_WIDTH**\n'
    '-   **FONT_SIZE**\n'
    '\n'
    'REPRESENTATION: Expected values are\n'
    '-   **REPRESENTATION_POINTS**\n'
    '-   **REPRESENTATION_WIREFRAME**\n'
    '-   **REPRESENTATION_SURFACE**\n'
    '\n'
    'IMMEDIATE_RENDERING:\n'
    '-   Turn on immediate rendering by setting the value to 1.\n'
    '-   Turn off immediate rendering by setting the value to 0.\n'
    '\n'
    'SHADING: Expected values are\n'
    '-   **SHADING_FLAT**\n'
    '-   **SHADING_GOURAUD**\n'
    '-   **SHADING_PHONG**']
parse_name: cv.viz.Viz3d.getRenderingProperty with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::getRenderingProperty namespace:cv::viz classpath:Viz3d classname:Viz3d name:getRenderingProperty
register (method) getRenderingProperty in cv::viz::Viz3d (cv_viz_Viz3d_getRenderingProperty_String_int)

--- Incoming ---
[   'cv.viz.Viz3d.setRepresentation',
    'void',
    [],
    [['int', 'representation', '', []]],
    None,
    '@brief Sets geometry representation of the widgets to surface, wireframe '
    'or points.\n'
    '\n'
    '@param representation Geometry representation which can be one of the '
    'following:\n'
    '-   **REPRESENTATION_POINTS**\n'
    '-   **REPRESENTATION_WIREFRAME**\n'
    '-   **REPRESENTATION_SURFACE**']
parse_name: cv.viz.Viz3d.setRepresentation with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setRepresentation namespace:cv::viz classpath:Viz3d classname:Viz3d name:setRepresentation
register (method) setRepresentation in cv::viz::Viz3d (cv_viz_Viz3d_setRepresentation_int)

--- Incoming ---
[   'cv.viz.Viz3d.setGlobalWarnings',
    'void',
    [],
    [['bool', 'enabled', 'false', []]],
    None,
    '']
parse_name: cv.viz.Viz3d.setGlobalWarnings with ['cv', 'cv::viz'] -> fullname:cv::viz::Viz3d::setGlobalWarnings namespace:cv::viz classpath:Viz3d classname:Viz3d name:setGlobalWarnings
register (method) setGlobalWarnings in cv::viz::Viz3d (cv_viz_Viz3d_setGlobalWarnings_bool)


=============== Header: /Users/calumbruton/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.26.6/headers/4.1/opencv2/viz/vizcore.hpp ================


Namespaces: ['cv', 'cv.viz']
Comment: {'viz': '\n@defgroup viz 3D Visualizer\n\nThis section describes 3D visualization window as well as classes and methods that are used to\ninteract with it.\n\n3D visualization window (see Viz3d) is used to display widgets (see Widget), and it provides several\nmethods to interact with scene and widgets.\n\n@{\n@defgroup viz_widget Widget\n\nIn this section, the widget framework is explained. Widgets represent 2D or 3D objects, varying from\nsimple ones such as lines to complex ones such as point clouds and meshes.\n\nWidgets are **implicitly shared**. Therefore, one can add a widget to the scene, and modify the\nwidget without re-adding the widget.\n\n@code\n// Create a cloud widget\nviz::WCloud cw(cloud, viz::Color::red());\n// Display it in a window\nmyWindow.showWidget("CloudWidget1", cw);\n// Modify it, and it will be modified in the window.\ncw.setColor(viz::Color::yellow());\n@endcode\n\n@}\n\n'}

--- Incoming ---
[   'cv.viz.makeTransformToGlobal',
    'Affine3d',
    [],
    [   ['const Vec3d&', 'axis_x', '', []],
        ['const Vec3d&', 'axis_y', '', []],
        ['const Vec3d&', 'axis_z', '', []],
        ['const Vec3d&', 'origin', 'Vec3d::all(0)', []]],
    None,
    '@brief Takes coordinate frame data and builds transform to global '
    'coordinate frame.\n'
    '\n'
    '@param axis_x X axis vector in global coordinate frame.\n'
    '@param axis_y Y axis vector in global coordinate frame.\n'
    '@param axis_z Z axis vector in global coordinate frame.\n'
    '@param origin Origin of the coordinate frame in global coordinate frame.\n'
    '\n'
    '@return An affine transform that describes transformation between global '
    'coordinate frame\n'
    'and a given coordinate frame.\n'
    'The returned transforms can transform a point in the given coordinate '
    'frame to the global\n'
    'coordinate frame.']
parse_name: cv.viz.makeTransformToGlobal with ['cv', 'cv::viz'] -> fullname:cv::viz::makeTransformToGlobal namespace:cv::viz classpath: classname: name:makeTransformToGlobal
register (function) makeTransformToGlobal (cv_viz_makeTransformToGlobal_Vec3d_Vec3d_Vec3d_Vec3d)

--- Incoming ---
[   'cv.viz.makeCameraPose',
    'Affine3d',
    [],
    [   ['const Vec3d&', 'position', '', []],
        ['const Vec3d&', 'focal_point', '', []],
        ['const Vec3d&', 'y_dir', '', []]],
    None,
    '@brief Constructs camera pose from position, focal_point and up_vector '
    '(see gluLookAt() for more\n'
    'information).\n'
    '\n'
    '@param position Position of the camera in global coordinate frame.\n'
    '@param focal_point Focal point of the camera in global coordinate frame.\n'
    '@param y_dir Up vector of the camera in global coordinate frame.\n'
    '\n'
    'This function returns pose of the camera in global coordinate frame.']
parse_name: cv.viz.makeCameraPose with ['cv', 'cv::viz'] -> fullname:cv::viz::makeCameraPose namespace:cv::viz classpath: classname: name:makeCameraPose
register (function) makeCameraPose (cv_viz_makeCameraPose_Vec3d_Vec3d_Vec3d)

--- Incoming ---
[   'cv.viz.getWindowByName',
    'Viz3d',
    [],
    [['const String &', 'window_name', '', []]],
    None,
    '@brief Retrieves a window by its name.\n'
    '\n'
    '@param window_name Name of the window that is to be retrieved.\n'
    '\n'
    'This function returns a Viz3d object with the given name.\n'
    '\n'
    '@note If the window with that name already exists, that window is '
    'returned. Otherwise, new window is\n'
    'created with the given name, and it is returned.\n'
    '\n'
    '@note Window names are automatically prefixed by "Viz - " if it is not '
    'done by the user.\n'
    '@code\n'
    '/// window and window_2 are the same windows.\n'
    'viz::Viz3d window   = viz::getWindowByName("myWindow");\n'
    'viz::Viz3d window_2 = viz::getWindowByName("Viz - myWindow");\n'
    '@endcode']
parse_name: cv.viz.getWindowByName with ['cv', 'cv::viz'] -> fullname:cv::viz::getWindowByName namespace:cv::viz classpath: classname: name:getWindowByName
register (function) getWindowByName (cv_viz_getWindowByName_String)

--- Incoming ---
[   'cv.viz.unregisterAllWindows',
    'void',
    [],
    [],
    None,
    'Unregisters all Viz windows from internal database. After it '
    "'getWindowByName()' will create new windows instead of getting existing "
    'from the database.']
parse_name: cv.viz.unregisterAllWindows with ['cv', 'cv::viz'] -> fullname:cv::viz::unregisterAllWindows namespace:cv::viz classpath: classname: name:unregisterAllWindows
register (function) unregisterAllWindows (cv_viz_unregisterAllWindows)

--- Incoming ---
[   'cv.viz.imshow',
    'Viz3d',
    [],
    [   ['const String&', 'window_name', '', []],
        ['InputArray', 'image', '', []],
        ['const Size&', 'window_size', 'Size(-1, -1)', []]],
    None,
    'Displays image in specified window']
parse_name: cv.viz.imshow with ['cv', 'cv::viz'] -> fullname:cv::viz::imshow namespace:cv::viz classpath: classname: name:imshow
register (function) imshow (cv_viz_imshow_String__InputArray_Size)

--- Incoming ---
[   'cv.viz.isNan',
    'bool',
    [],
    [['float', 'x', '', []]],
    None,
    '@brief Checks **float/double** value for nan.\n'
    '\n'
    '@param x return true if nan.']
parse_name: cv.viz.isNan with ['cv', 'cv::viz'] -> fullname:cv::viz::isNan namespace:cv::viz classpath: classname: name:isNan
register (function) isNan (cv_viz_isNan_float)

--- Incoming ---
[   'cv.viz.isNan',
    'bool',
    [],
    [['double', 'x', '', []]],
    None,
    '@brief Checks **float/double** value for nan.\n'
    '\n'
    '@param x return true if nan.']
parse_name: cv.viz.isNan with ['cv', 'cv::viz'] -> fullname:cv::viz::isNan namespace:cv::viz classpath: classname: name:isNan
register (function) isNan (cv_viz_isNan_double)

--- Incoming ---
[   'cv.viz.isNan',
    'template<typename _Tp> bool',
    [],
    [['const Point3_<_Tp>&', 'p', '', []]],
    None,
    '@brief Checks **float/double** value for nan.\n'
    '\n'
    '@param p return true if **any** of the elements of the point is *nan*.']
parse_name: cv.viz.isNan with ['cv', 'cv::viz'] -> fullname:cv::viz::isNan namespace:cv::viz classpath: classname: name:isNan
Registering an unknown type: template<typename _Tp> bool
Registering an unknown type: Point3_<_Tp>
register (function) isNan (cv_viz_isNan_Point3_<_Tp>)

--- Incoming ---
[   'cv.viz.writeCloud',
    'void',
    [],
    [   ['const String&', 'file', '', []],
        ['InputArray', 'cloud', '', []],
        ['InputArray', 'colors', 'noArray()', []],
        ['InputArray', 'normals', 'noArray()', []],
        ['bool', 'binary', 'false', []]],
    None,
    '* @param file Filename with extension. Supported formats: PLY, XYZ and '
    'OBJ.\n'
    '* @param cloud  Supported depths: CV_32F and CV_64F. Supported channels: '
    '3 and 4.\n'
    '* @param colors Used by PLY format only. Supported depth: CV_8U. '
    'Supported channels: 1, 3 and 4.\n'
    '* @param normals Used by PLY and OBJ format only. Supported depths: '
    'CV_32F and CV_64F.\n'
    '*                Supported channels: 3 and 4.\n'
    '* @param binary Used only for PLY format.']
parse_name: cv.viz.writeCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::writeCloud namespace:cv::viz classpath: classname: name:writeCloud
register (function) writeCloud (cv_viz_writeCloud_String__InputArray__InputArray__InputArray_bool)

--- Incoming ---
[   'cv.viz.readCloud',
    'Mat',
    [],
    [   ['const String&', 'file', '', []],
        ['OutputArray', 'colors', 'noArray()', []],
        ['OutputArray', 'normals', 'noArray()', []]],
    None,
    '* @param file Filename with extension. Supported formats: PLY, XYZ, OBJ '
    'and STL.\n'
    '* @param colors Used by PLY and STL formats only.\n'
    '* @param normals Used by PLY, OBJ and STL formats only.\n'
    '* @return A mat containing the point coordinates with depth CV_32F or '
    'CV_64F and number of\n'
    '*         channels 3 or 4 with only 1 row.']
parse_name: cv.viz.readCloud with ['cv', 'cv::viz'] -> fullname:cv::viz::readCloud namespace:cv::viz classpath: classname: name:readCloud
register (function) readCloud (cv_viz_readCloud_String__OutputArray__OutputArray)

--- Incoming ---
['cv.viz.readMesh', 'Mesh', [], [['const String&', 'file', '', []]], None, '']
parse_name: cv.viz.readMesh with ['cv', 'cv::viz'] -> fullname:cv::viz::readMesh namespace:cv::viz classpath: classname: name:readMesh
register (function) readMesh (cv_viz_readMesh_String)

--- Incoming ---
[   'cv.viz.readPose',
    'bool',
    [],
    [   ['const String&', 'file', '', []],
        ['Affine3d&', 'pose', '', []],
        ['const String&', 'tag', '"pose"', []]],
    None,
    '* @param file Filename of type supported by cv::FileStorage.\n'
    '* @param pose Output matrix.\n'
    '* @param tag Name of the pose in the file.']
parse_name: cv.viz.readPose with ['cv', 'cv::viz'] -> fullname:cv::viz::readPose namespace:cv::viz classpath: classname: name:readPose
Registering an unknown type: Affine3d
register (function) readPose (cv_viz_readPose_String_Affine3d_String)

--- Incoming ---
[   'cv.viz.writePose',
    'void',
    [],
    [   ['const String&', 'file', '', []],
        ['const Affine3d&', 'pose', '', []],
        ['const String&', 'tag', '"pose"', []]],
    None,
    '* @param file Filename.\n'
    '* @param pose Input matrix.\n'
    '* @param tag Name of the pose to be saved into the given file.']
parse_name: cv.viz.writePose with ['cv', 'cv::viz'] -> fullname:cv::viz::writePose namespace:cv::viz classpath: classname: name:writePose
Registering an unknown type: Affine3d
register (function) writePose (cv_viz_writePose_String_Affine3d_String)

--- Incoming ---
[   'cv.viz.writeTrajectory',
    'void',
    [],
    [   ['InputArray', 'traj', '', []],
        ['const String&', 'files_format', '"pose%05d.xml"', []],
        ['int', 'start', '0', []],
        ['const String&', 'tag', '"pose"', []]],
    None,
    'takes vector<Affine3<T>> with T = float/dobule and writes to a sequence '
    'of files with given filename format\n'
    '* @param traj Trajectory containing a list of poses. It can be\n'
    '*          - std::vector<cv::Mat>, each cv::Mat is of type CV_32F16 or '
    'CV_64FC16\n'
    '*          - std::vector<cv::Affine3f>, std::vector<cv::Affine3d>\n'
    '*          - cv::Mat of type CV_32FC16 OR CV_64F16\n'
    '* @param files_format Format specifier string for constructing '
    'filenames.\n'
    '*                     The only placeholder in the string should support '
    '`int`.\n'
    '* @param start The initial counter for files_format.\n'
    '* @param tag Name of the matrix in the file.']
parse_name: cv.viz.writeTrajectory with ['cv', 'cv::viz'] -> fullname:cv::viz::writeTrajectory namespace:cv::viz classpath: classname: name:writeTrajectory
register (function) writeTrajectory (cv_viz_writeTrajectory__InputArray_String_int_String)

--- Incoming ---
[   'cv.viz.readTrajectory',
    'void',
    [],
    [   ['OutputArray', 'traj', '', []],
        ['const String&', 'files_format', '"pose%05d.xml"', []],
        ['int', 'start', '0', []],
        ['int', 'end', 'INT_MAX', []],
        ['const String&', 'tag', '"pose"', []]],
    None,
    'takes vector<Affine3<T>> with T = float/dobule and loads poses from '
    'sequence of files\n'
    '*\n'
    '* @param traj Output array containing a lists of poses. It can be\n'
    '*             - std::vector<cv::Affine3f>, std::vector<cv::Affine3d>\n'
    '*             - cv::Mat\n'
    '* @param files_format Format specifier string for constructing '
    'filenames.\n'
    '*                     The only placeholder in the string should support '
    '`int`.\n'
    '* @param start The initial counter for files_format. It must be greater '
    'than or equal to 0.\n'
    '* @param end The final  counter for files_format.\n'
    '* @param tag Name of the matrix in the file.']
parse_name: cv.viz.readTrajectory with ['cv', 'cv::viz'] -> fullname:cv::viz::readTrajectory namespace:cv::viz classpath: classname: name:readTrajectory
register (function) readTrajectory (cv_viz_readTrajectory__OutputArray_String_int_int_String)

--- Incoming ---
[   'cv.viz.computeNormals',
    'void',
    [],
    [['const Mesh&', 'mesh', '', []], ['OutputArray', 'normals', '', []]],
    None,
    'Computing normals for mesh\n'
    '* @param mesh Input mesh.\n'
    '* @param normals Normals at very point in the mesh of type CV_64FC3.']
parse_name: cv.viz.computeNormals with ['cv', 'cv::viz'] -> fullname:cv::viz::computeNormals namespace:cv::viz classpath: classname: name:computeNormals
register (function) computeNormals (cv_viz_computeNormals_Mesh__OutputArray)


===== Generating... =====
Generating func cv_Vec3b_const
Generating func cv_viz_computeNormals_Mesh__OutputArray
Generating func cv_viz_getWindowByName_String
Generating func cv_viz_imshow_String__InputArray_Size
Generating func cv_viz_isNan_Point3_<_Tp>
  ignored: return type class Unknown[template<typename _Tp> bool] is ignored
Generating func cv_viz_isNan_double
Generating func cv_viz_isNan_float
Generating func cv_viz_makeCameraPose_Vec3d_Vec3d_Vec3d
  ignored: return type class Unknown[Affine3d] is ignored
Generating func cv_viz_makeTransformToGlobal_Vec3d_Vec3d_Vec3d_Vec3d
  ignored: return type class Unknown[Affine3d] is ignored
Generating func cv_viz_readCloud_String__OutputArray__OutputArray
Generating func cv_viz_readMesh_String
Generating func cv_viz_readPose_String_Affine3d_String
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_readTrajectory__OutputArray_String_int_int_String
Generating func cv_viz_unregisterAllWindows
Generating func cv_viz_writeCloud_String__InputArray__InputArray__InputArray_bool
Generating func cv_viz_writePose_String_Affine3d_String
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_writeTrajectory__InputArray_String_int_String
Ghost class cv::Algorithm (ghost, trait), ignoring
Ghost class cv::DMatch (simple, ghost), ignoring
Ghost class cv::DescriptorMatcher (ghost, trait), ignoring
Ghost class cv::Feature2D (ghost, trait), ignoring
Ghost class cv::FileNode (ghost), ignoring
Ghost class cv::FileStorage (ghost), ignoring
Ghost class cv::KeyPoint (simple, ghost), ignoring
Ghost class cv::Mat (ghost), ignoring
Ghost class cv::MatExpr (ghost), ignoring
Ghost class cv::Range (ghost), ignoring
Ghost class cv::RotatedRect (ghost), ignoring
Ghost class cv::TermCriteria (ghost), ignoring
Ghost class cv::UMat (ghost), ignoring
Ghost class cv::_InputArray (ghost, trait), ignoring
Ghost class cv::_InputOutputArray (ghost, trait), ignoring
Ghost class cv::_OutputArray (ghost, trait), ignoring
Ghost class cv::dnn::Layer (ghost, trait), ignoring
Ghost class cv::dnn::LayerParams (ghost), ignoring
Ghost class cv::utils::logging::LogTag (ghost), ignoring
Generating box for cv::viz::Camera
Generating func cv_viz_Camera_Camera_double_double_double_double_Size
Generating func cv_viz_Camera_Camera_Vec2d_Size
Generating func cv_viz_Camera_Camera_Matx33d_Size
  ignored: can not map type Unknown[Matx33d] yet
Generating func cv_viz_Camera_Camera_Matx44d_Size
  ignored: can not map type Unknown[Matx44d] yet
Generating func cv_viz_Camera_getClip_const
Generating func cv_viz_Camera_setClip_Vec2d
Generating func cv_viz_Camera_getWindowSize_const
Generating func cv_viz_Camera_setWindowSize_Size
Generating func cv_viz_Camera_getFov_const
Generating func cv_viz_Camera_setFov_Vec2d
Generating func cv_viz_Camera_getPrincipalPoint_const
Generating func cv_viz_Camera_getFocalLength_const
Generating func cv_viz_Camera_computeProjectionMatrix_const_Matx44d
  ignored: can not map type Unknown[Matx44d] yet
Generating func cv_viz_Camera_KinectCamera_Size
Generating box for cv::viz::Color
Generating func cv_viz_Color_Color
Generating func cv_viz_Color_Color_double
Generating func cv_viz_Color_Color_double_double_double
Generating func cv_viz_Color_Color_Scalar
Generating func cv_viz_Color_operator_Vec3b_const
Generating func cv_viz_Color_black
Generating func cv_viz_Color_blue
Generating func cv_viz_Color_green
Generating func cv_viz_Color_cyan
Generating func cv_viz_Color_red
Generating func cv_viz_Color_magenta
Generating func cv_viz_Color_yellow
Generating func cv_viz_Color_white
Generating func cv_viz_Color_gray
Generating func cv_viz_Color_mlab
Generating func cv_viz_Color_navy
Generating func cv_viz_Color_olive
Generating func cv_viz_Color_maroon
Generating func cv_viz_Color_teal
Generating func cv_viz_Color_rose
Generating func cv_viz_Color_azure
Generating func cv_viz_Color_lime
Generating func cv_viz_Color_gold
Generating func cv_viz_Color_brown
Generating func cv_viz_Color_orange
Generating func cv_viz_Color_chartreuse
Generating func cv_viz_Color_orange_red
Generating func cv_viz_Color_purple
Generating func cv_viz_Color_indigo
Generating func cv_viz_Color_pink
Generating func cv_viz_Color_cherry
Generating func cv_viz_Color_bluberry
Generating func cv_viz_Color_raspberry
Generating func cv_viz_Color_silver
Generating func cv_viz_Color_violet
Generating func cv_viz_Color_apricot
Generating func cv_viz_Color_turquoise
Generating func cv_viz_Color_celestial_blue
Generating func cv_viz_Color_amethyst
Generating func cv_viz_Color_not_set
Generating func cv_viz_Color_Color
  ignored: already there
Generating func cv_viz_Color_Color_double
  ignored: already there
Generating func cv_viz_Color_Color_double_double_double
  ignored: already there
Generating func cv_viz_Color_Color_Scalar
  ignored: already there
Generating func cv_viz_Color_black
  ignored: already there
Generating func cv_viz_Color_green
  ignored: already there
Generating func cv_viz_Color_blue
  ignored: already there
Generating func cv_viz_Color_cyan
  ignored: already there
Generating func cv_viz_Color_red
  ignored: already there
Generating func cv_viz_Color_yellow
  ignored: already there
Generating func cv_viz_Color_magenta
  ignored: already there
Generating func cv_viz_Color_white
  ignored: already there
Generating func cv_viz_Color_gray
  ignored: already there
Generating func cv_viz_Color_mlab
  ignored: already there
Generating func cv_viz_Color_navy
  ignored: already there
Generating func cv_viz_Color_olive
  ignored: already there
Generating func cv_viz_Color_maroon
  ignored: already there
Generating func cv_viz_Color_teal
  ignored: already there
Generating func cv_viz_Color_rose
  ignored: already there
Generating func cv_viz_Color_azure
  ignored: already there
Generating func cv_viz_Color_lime
  ignored: already there
Generating func cv_viz_Color_gold
  ignored: already there
Generating func cv_viz_Color_brown
  ignored: already there
Generating func cv_viz_Color_orange
  ignored: already there
Generating func cv_viz_Color_chartreuse
  ignored: already there
Generating func cv_viz_Color_orange_red
  ignored: already there
Generating func cv_viz_Color_purple
  ignored: already there
Generating func cv_viz_Color_indigo
  ignored: already there
Generating func cv_viz_Color_pink
  ignored: already there
Generating func cv_viz_Color_cherry
  ignored: already there
Generating func cv_viz_Color_bluberry
  ignored: already there
Generating func cv_viz_Color_raspberry
  ignored: already there
Generating func cv_viz_Color_silver
  ignored: already there
Generating func cv_viz_Color_violet
  ignored: already there
Generating func cv_viz_Color_apricot
  ignored: already there
Generating func cv_viz_Color_turquoise
  ignored: already there
Generating func cv_viz_Color_celestial_blue
  ignored: already there
Generating func cv_viz_Color_amethyst
  ignored: already there
Generating func cv_viz_Color_not_set
  ignored: already there
Generating box for cv::viz::KeyboardEvent
Generating func cv_viz_KeyboardEvent_KeyboardEvent_Action_String_unsigned_char_int
  ignored: can not map type Unknown[Action] yet
Generating box for cv::viz::Mesh
Generating func cv_viz_Mesh_load_String_int
Generating box for cv::viz::MouseEvent
Generating func cv_viz_MouseEvent_MouseEvent_Type_MouseButton_Point_int
  ignored: can not map type Unknown[Type] yet
Generating box for cv::viz::Viz3d
Generating func cv_viz_Viz3d_Viz3d_String
Generating func cv_viz_Viz3d_Viz3d_Viz3d
Generating func cv_viz_Viz3d_showWidget_String_Widget_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_Viz3d_removeWidget_String
Generating func cv_viz_Viz3d_getWidget_const_String
Generating func cv_viz_Viz3d_removeAllWidgets
Generating func cv_viz_Viz3d_showImage__InputArray_Size
Generating func cv_viz_Viz3d_setWidgetPose_String_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_Viz3d_updateWidgetPose_String_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_Viz3d_getWidgetPose_const_String
  ignored: return type class Unknown[Affine3d] is ignored
Generating func cv_viz_Viz3d_setCamera_Camera
Generating func cv_viz_Viz3d_getCamera_const
Generating func cv_viz_Viz3d_getViewerPose_const
  ignored: return type class Unknown[Affine3d] is ignored
Generating func cv_viz_Viz3d_setViewerPose_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_Viz3d_resetCameraViewpoint_String
Generating func cv_viz_Viz3d_resetCamera
Generating func cv_viz_Viz3d_convertToWindowCoordinates_Point3d_Point3d
Generating func cv_viz_Viz3d_converTo3DRay_Point3d_Point3d_Vec3d
Generating func cv_viz_Viz3d_getWindowSize_const
Generating func cv_viz_Viz3d_setWindowSize_Size
Generating func cv_viz_Viz3d_getWindowName_const
Generating func cv_viz_Viz3d_getScreenshot_const
Generating func cv_viz_Viz3d_saveScreenshot_String
Generating func cv_viz_Viz3d_setWindowPosition_Point
Generating func cv_viz_Viz3d_setFullScreen_bool
Generating func cv_viz_Viz3d_setBackgroundColor_Color_Color
Generating func cv_viz_Viz3d_setBackgroundTexture__InputArray
Generating func cv_viz_Viz3d_setBackgroundMeshLab
Generating func cv_viz_Viz3d_spin
Generating func cv_viz_Viz3d_spinOnce_int_bool
Generating func cv_viz_Viz3d_setOffScreenRendering
Generating func cv_viz_Viz3d_removeAllLights
Generating func cv_viz_Viz3d_addLight_Vec3d_Vec3d_Color_Color_Color_Color
Generating func cv_viz_Viz3d_wasStopped_const
Generating func cv_viz_Viz3d_close
Generating func cv_viz_Viz3d_setRenderingProperty_String_int_double
Generating func cv_viz_Viz3d_getRenderingProperty_String_int
Generating func cv_viz_Viz3d_setRepresentation_int
Generating func cv_viz_Viz3d_setGlobalWarnings_bool
Ghost class cv::viz::Viz3d::KeyboardCallback (ghost), ignoring
Ghost class cv::viz::Viz3d::MouseCallback (ghost), ignoring
Generating box for cv::viz::WArrow
Generating func cv_viz_WArrow_WArrow_Point3d_Point3d_double_Color
Generating box for cv::viz::WCameraPosition
Generating func cv_viz_WCameraPosition_WCameraPosition_double
Generating func cv_viz_WCameraPosition_WCameraPosition_Matx33d_double_Color
  ignored: can not map type Unknown[Matx33d] yet
Generating func cv_viz_WCameraPosition_WCameraPosition_Vec2d_double_Color
Generating func cv_viz_WCameraPosition_WCameraPosition_Matx33d__InputArray_double_Color
  ignored: can not map type Unknown[Matx33d] yet
Generating func cv_viz_WCameraPosition_WCameraPosition_Vec2d__InputArray_double_Color
Generating box for cv::viz::WCircle
Generating func cv_viz_WCircle_WCircle_double_double_Color
Generating func cv_viz_WCircle_WCircle_double_Point3d_Vec3d_double_Color
Generating box for cv::viz::WCloud
Generating func cv_viz_WCloud_WCloud__InputArray__InputArray
Generating func cv_viz_WCloud_WCloud__InputArray_Color
Generating func cv_viz_WCloud_WCloud__InputArray__InputArray__InputArray
Generating func cv_viz_WCloud_WCloud__InputArray_Color__InputArray
Generating box for cv::viz::WCloudCollection
Generating func cv_viz_WCloudCollection_WCloudCollection
Generating func cv_viz_WCloudCollection_addCloud__InputArray__InputArray_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_WCloudCollection_addCloud__InputArray_Color_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_WCloudCollection_finalize
Generating box for cv::viz::WCloudNormals
Generating func cv_viz_WCloudNormals_WCloudNormals__InputArray__InputArray_int_double_Color
Generating box for cv::viz::WCone
Generating func cv_viz_WCone_WCone_double_double_int_Color
Generating func cv_viz_WCone_WCone_double_Point3d_Point3d_int_Color
Generating box for cv::viz::WCoordinateSystem
Generating func cv_viz_WCoordinateSystem_WCoordinateSystem_double
Generating box for cv::viz::WCube
Generating func cv_viz_WCube_WCube_Point3d_Point3d_bool_Color
Generating box for cv::viz::WCylinder
Generating func cv_viz_WCylinder_WCylinder_Point3d_Point3d_double_int_Color
Generating box for cv::viz::WGrid
Generating func cv_viz_WGrid_WGrid_Vec2i_Vec2d_Color
Generating func cv_viz_WGrid_WGrid_Point3d_Vec3d_Vec3d_Vec2i_Vec2d_Color
Generating box for cv::viz::WImage3D
Generating func cv_viz_WImage3D_WImage3D__InputArray_Size2d
Generating func cv_viz_WImage3D_WImage3D__InputArray_Size2d_Vec3d_Vec3d_Vec3d
Generating func cv_viz_WImage3D_setImage__InputArray
Generating func cv_viz_WImage3D_setSize_Size
Generating box for cv::viz::WImageOverlay
Generating func cv_viz_WImageOverlay_WImageOverlay__InputArray_Rect
Generating func cv_viz_WImageOverlay_setImage__InputArray
Generating box for cv::viz::WLine
Generating func cv_viz_WLine_WLine_Point3d_Point3d_Color
Generating box for cv::viz::WMesh
Generating func cv_viz_WMesh_WMesh_Mesh
Generating func cv_viz_WMesh_WMesh__InputArray__InputArray__InputArray__InputArray
Generating box for cv::viz::WPaintedCloud
Generating func cv_viz_WPaintedCloud_WPaintedCloud__InputArray
Generating func cv_viz_WPaintedCloud_WPaintedCloud__InputArray_Point3d_Point3d
Generating func cv_viz_WPaintedCloud_WPaintedCloud__InputArray_Point3d_Point3d_Color_Color
Generating box for cv::viz::WPlane
Generating func cv_viz_WPlane_WPlane_Size2d_Color
Generating func cv_viz_WPlane_WPlane_Point3d_Vec3d_Vec3d_Size2d_Color
Generating box for cv::viz::WPolyLine
Generating func cv_viz_WPolyLine_WPolyLine__InputArray__InputArray
Generating func cv_viz_WPolyLine_WPolyLine__InputArray_Color
Generating box for cv::viz::WSphere
Generating func cv_viz_WSphere_WSphere_Point3d_double_int_Color
Generating box for cv::viz::WText
Generating func cv_viz_WText_WText_String_Point_int_Color
Generating func cv_viz_WText_setText_String
Generating func cv_viz_WText_getText_const
Generating box for cv::viz::WText3D
Generating func cv_viz_WText3D_WText3D_String_Point3d_double_bool_Color
Generating func cv_viz_WText3D_setText_String
Generating func cv_viz_WText3D_getText_const
Generating box for cv::viz::WTrajectory
Generating func cv_viz_WTrajectory_WTrajectory__InputArray_int_double_Color
Generating box for cv::viz::WTrajectoryFrustums
Generating func cv_viz_WTrajectoryFrustums_WTrajectoryFrustums__InputArray_Matx33d_double_Color
  ignored: can not map type Unknown[Matx33d] yet
Generating func cv_viz_WTrajectoryFrustums_WTrajectoryFrustums__InputArray_Vec2d_double_Color
Generating box for cv::viz::WTrajectorySpheres
Generating func cv_viz_WTrajectorySpheres_WTrajectorySpheres__InputArray_double_double_Color_Color
Generating box for cv::viz::WWidgetMerger
Generating func cv_viz_WWidgetMerger_WWidgetMerger
Generating func cv_viz_WWidgetMerger_addWidget_Widget3D_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_WWidgetMerger_finalize
Generating impl for trait cv::viz::Widget (trait)
Generating func cv_viz_Widget_setRenderingProperty_int_double
Generating func cv_viz_Widget_getRenderingProperty_const_int
Generating func cv_viz_Widget_cast_const
  ignored: return type class Unknown[template<typename _W> _W] is ignored
Generating func cv_viz_Widget_cast_<_Widget2D_>_const
  ignored: return type class Unknown[template<> Widget2D] is ignored
Generating func cv_viz_Widget_cast_<_Widget3D_>_const
  ignored: return type class Unknown[template<> Widget3D] is ignored
Generating func cv_viz_Widget_cast_<_WLine_>_const
  ignored: return type class Unknown[template<> WLine] is ignored
Generating func cv_viz_Widget_cast_<_WPlane_>_const
  ignored: return type class Unknown[template<> WPlane] is ignored
Generating func cv_viz_Widget_cast_<_WSphere_>_const
  ignored: return type class Unknown[template<> WSphere] is ignored
Generating func cv_viz_Widget_cast_<_WCylinder_>_const
  ignored: return type class Unknown[template<> WCylinder] is ignored
Generating func cv_viz_Widget_cast_<_WArrow_>_const
  ignored: return type class Unknown[template<> WArrow] is ignored
Generating func cv_viz_Widget_cast_<_WCircle_>_const
  ignored: return type class Unknown[template<> WCircle] is ignored
Generating func cv_viz_Widget_cast_<_WCone_>_const
  ignored: return type class Unknown[template<> WCone] is ignored
Generating func cv_viz_Widget_cast_<_WCube_>_const
  ignored: return type class Unknown[template<> WCube] is ignored
Generating func cv_viz_Widget_cast_<_WCoordinateSystem_>_const
  ignored: return type class Unknown[template<> WCoordinateSystem] is ignored
Generating func cv_viz_Widget_cast_<_WPolyLine_>_const
  ignored: return type class Unknown[template<> WPolyLine] is ignored
Generating func cv_viz_Widget_cast_<_WGrid_>_const
  ignored: return type class Unknown[template<> WGrid] is ignored
Generating func cv_viz_Widget_cast_<_WText3D_>_const
  ignored: return type class Unknown[template<> WText3D] is ignored
Generating func cv_viz_Widget_cast_<_WText_>_const
  ignored: return type class Unknown[template<> WText] is ignored
Generating func cv_viz_Widget_cast_<_WImageOverlay_>_const
  ignored: return type class Unknown[template<> WImageOverlay] is ignored
Generating func cv_viz_Widget_cast_<_WImage3D_>_const
  ignored: return type class Unknown[template<> WImage3D] is ignored
Generating func cv_viz_Widget_cast_<_WCameraPosition_>_const
  ignored: return type class Unknown[template<> WCameraPosition] is ignored
Generating func cv_viz_Widget_cast_<_WTrajectory_>_const
  ignored: return type class Unknown[template<> WTrajectory] is ignored
Generating func cv_viz_Widget_cast_<_WTrajectoryFrustums_>_const
  ignored: return type class Unknown[template<> WTrajectoryFrustums] is ignored
Generating func cv_viz_Widget_cast_<_WTrajectorySpheres_>_const
  ignored: return type class Unknown[template<> WTrajectorySpheres] is ignored
Generating func cv_viz_Widget_cast_<_WCloud_>_const
  ignored: return type class Unknown[template<> WCloud] is ignored
Generating func cv_viz_Widget_cast_<_WPaintedCloud_>_const
  ignored: return type class Unknown[template<> WPaintedCloud] is ignored
Generating func cv_viz_Widget_cast_<_WCloudCollection_>_const
  ignored: return type class Unknown[template<> WCloudCollection] is ignored
Generating func cv_viz_Widget_cast_<_WCloudNormals_>_const
  ignored: return type class Unknown[template<> WCloudNormals] is ignored
Generating func cv_viz_Widget_cast_<_WMesh_>_const
  ignored: return type class Unknown[template<> WMesh] is ignored
Generating func cv_viz_Widget_cast_<_WWidgetMerger_>_const
  ignored: return type class Unknown[template<> WWidgetMerger] is ignored
Generating box for cv::viz::Widget (trait)
Generating func cv_viz_Widget_Widget
Generating func cv_viz_Widget_Widget_Widget
Generating func cv_viz_Widget_fromPlyFile_String
Generating func cv_viz_Widget_setRenderingProperty_int_double
  ignored: already there
Generating func cv_viz_Widget_getRenderingProperty_const_int
  ignored: already there
Generating func cv_viz_Widget_cast_const
  ignored: return type class Unknown[template<typename _W> _W] is ignored
Generating func cv_viz_Widget_cast_<_Widget2D_>_const
  ignored: return type class Unknown[template<> Widget2D] is ignored
Generating func cv_viz_Widget_cast_<_Widget3D_>_const
  ignored: return type class Unknown[template<> Widget3D] is ignored
Generating func cv_viz_Widget_cast_<_WLine_>_const
  ignored: return type class Unknown[template<> WLine] is ignored
Generating func cv_viz_Widget_cast_<_WPlane_>_const
  ignored: return type class Unknown[template<> WPlane] is ignored
Generating func cv_viz_Widget_cast_<_WSphere_>_const
  ignored: return type class Unknown[template<> WSphere] is ignored
Generating func cv_viz_Widget_cast_<_WCylinder_>_const
  ignored: return type class Unknown[template<> WCylinder] is ignored
Generating func cv_viz_Widget_cast_<_WArrow_>_const
  ignored: return type class Unknown[template<> WArrow] is ignored
Generating func cv_viz_Widget_cast_<_WCircle_>_const
  ignored: return type class Unknown[template<> WCircle] is ignored
Generating func cv_viz_Widget_cast_<_WCone_>_const
  ignored: return type class Unknown[template<> WCone] is ignored
Generating func cv_viz_Widget_cast_<_WCube_>_const
  ignored: return type class Unknown[template<> WCube] is ignored
Generating func cv_viz_Widget_cast_<_WCoordinateSystem_>_const
  ignored: return type class Unknown[template<> WCoordinateSystem] is ignored
Generating func cv_viz_Widget_cast_<_WPolyLine_>_const
  ignored: return type class Unknown[template<> WPolyLine] is ignored
Generating func cv_viz_Widget_cast_<_WGrid_>_const
  ignored: return type class Unknown[template<> WGrid] is ignored
Generating func cv_viz_Widget_cast_<_WText3D_>_const
  ignored: return type class Unknown[template<> WText3D] is ignored
Generating func cv_viz_Widget_cast_<_WText_>_const
  ignored: return type class Unknown[template<> WText] is ignored
Generating func cv_viz_Widget_cast_<_WImageOverlay_>_const
  ignored: return type class Unknown[template<> WImageOverlay] is ignored
Generating func cv_viz_Widget_cast_<_WImage3D_>_const
  ignored: return type class Unknown[template<> WImage3D] is ignored
Generating func cv_viz_Widget_cast_<_WCameraPosition_>_const
  ignored: return type class Unknown[template<> WCameraPosition] is ignored
Generating func cv_viz_Widget_cast_<_WTrajectory_>_const
  ignored: return type class Unknown[template<> WTrajectory] is ignored
Generating func cv_viz_Widget_cast_<_WTrajectoryFrustums_>_const
  ignored: return type class Unknown[template<> WTrajectoryFrustums] is ignored
Generating func cv_viz_Widget_cast_<_WTrajectorySpheres_>_const
  ignored: return type class Unknown[template<> WTrajectorySpheres] is ignored
Generating func cv_viz_Widget_cast_<_WCloud_>_const
  ignored: return type class Unknown[template<> WCloud] is ignored
Generating func cv_viz_Widget_cast_<_WPaintedCloud_>_const
  ignored: return type class Unknown[template<> WPaintedCloud] is ignored
Generating func cv_viz_Widget_cast_<_WCloudCollection_>_const
  ignored: return type class Unknown[template<> WCloudCollection] is ignored
Generating func cv_viz_Widget_cast_<_WCloudNormals_>_const
  ignored: return type class Unknown[template<> WCloudNormals] is ignored
Generating func cv_viz_Widget_cast_<_WMesh_>_const
  ignored: return type class Unknown[template<> WMesh] is ignored
Generating func cv_viz_Widget_cast_<_WWidgetMerger_>_const
  ignored: return type class Unknown[template<> WWidgetMerger] is ignored
Generating impl for trait cv::viz::Widget2D (trait)
Generating func cv_viz_Widget2D_setColor_Color
Generating box for cv::viz::Widget2D (trait)
Generating func cv_viz_Widget2D_Widget2D
Generating func cv_viz_Widget2D_setColor_Color
  ignored: already there
Generating impl for trait cv::viz::Widget3D (trait)
Generating func cv_viz_Widget3D_setPose_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_Widget3D_updatePose_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_Widget3D_getPose_const
  ignored: return type class Unknown[Affine3d] is ignored
Generating func cv_viz_Widget3D_applyTransform_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_Widget3D_setColor_Color
Generating box for cv::viz::Widget3D (trait)
Generating func cv_viz_Widget3D_Widget3D
Generating func cv_viz_Widget3D_setPose_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_Widget3D_updatePose_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_Widget3D_getPose_const
  ignored: return type class Unknown[Affine3d] is ignored
Generating func cv_viz_Widget3D_applyTransform_Affine3d
  ignored: can not map type Unknown[Affine3d] yet
Generating func cv_viz_Widget3D_setColor_Color
  ignored: already there
